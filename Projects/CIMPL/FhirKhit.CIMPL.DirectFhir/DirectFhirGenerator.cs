using FhirKhit.Tools;
using Hl7.Fhir.Model;
using Hl7.Fhir.Specification.Source;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;

namespace FhirKhit.CIMPL.DirectFhir
{
    public class DirectFhirGenerator : ConverterBase, IDisposable
    {
        public ZipSource Source
        {
            get
            {
                if (source == null)
                    source = new ZipSource("specification.zip");
                return source;
            }
        }
        ZipSource source = null;

        CodeEditor entryEditor = new CodeEditor();
        CodeBlockNested entryBlock;

        CodeEditor mapEditor = new CodeEditor();
        CodeBlockNested mapBlock;

        HashSet<String> baseDefinitions = new HashSet<string>();


        void ProcessSchemaItemSpecialiation(StructureDefinition sDef)
        {
            const string fcn = "ProcessSchemaItemSpecialiation";

            CodeBlockNested item = entryBlock.AppendBlock();
            CodeBlockNested vars = entryBlock.AppendBlock();

            String description = sDef.Description.ToString();
            String name = sDef.Snapshot.Element[0].Path;
            String parent = sDef.BaseDefinition.LastUriPart();

            // remove items that derive directly from primitives.
            switch (parent)
            {
                case "boolean":
                case "integer":
                case "decimal":
                case "uri":
                case "string":
                case "base64Binary":
                case "instant":
                case "dateTime":
                case "time":
                case "oid":
                case "id":
                case "markdown":
                case "unsignedInt":
                case "positiveInt":
                case "xhtml":
                    this.ConversionInfo(this.GetType().Name, fcn, $"Ignoring '{name}' because it dewrives from primitive '{parent}'");
                    return;
            }

            item
                .BlankLine()
                .Comment(description)
                .AppendCode($"Entry: {name}")
                .AppendCode($"Parent: {parent}")
                ;

            //    foreach (JToken property in properties.Children())
            //    {
            //        String pName = "";
            //        item
            //            .AppendCode($"Property: {pName}")
            //            ;

            //    }
        }

        void ProcessFhirElement(StructureDefinition sDef)
        {
            String baseDefinition = sDef.BaseDefinition;
            if (this.baseDefinitions.Contains(baseDefinition) == false)
                this.baseDefinitions.Add(baseDefinition);
            switch (sDef.BaseDefinition)
            {
                case "http://hl7.org/fhir/StructureDefinition/Element":
                case "http://hl7.org/fhir/StructureDefinition/Extension":
                    break;

                default:
                    if (sDef.Derivation == StructureDefinition.TypeDerivationRule.Specialization)
                        ProcessSchemaItemSpecialiation(sDef);
                    break;
            }
        }


        void ProcessFhirElement(String uri)
        {
            //const String fcn = "ProcessFhirElement";

            switch (Source.ResolveByUri(uri))
            {
                case StructureDefinition sDef:
                    ProcessFhirElement(sDef);
                    break;
            }
        }

        void ProcessFhirElements()
        {
            // const String fcn = "ProcessFhirElements";

            foreach (string uri in this.Source.ListResourceUris())
                ProcessFhirElement(uri);

            foreach (String baseDef in this.baseDefinitions)
                Trace.WriteLine(baseDef);
        }

        void CreateEditors(String outputDir)
        {
            this.entryEditor = new CodeEditor();
            this.entryEditor.SavePath = Path.Combine(outputDir, "DirectFhir.txt");

            this.mapEditor = new CodeEditor();
            this.mapEditor.SavePath = Path.Combine(outputDir, "DirectFhir_map_r4.txt");

            entryBlock = entryEditor.Blocks.AppendBlock();
            entryBlock
                .AppendLine($"Grammar: DataElement 6.0")
                .AppendLine($"Namespace: fhir.datatype")
                .AppendLine($"Description: \"Base fhir element definitions. Autogenerated\"")
                ;

            mapBlock = mapEditor.Blocks.AppendBlock();
            mapBlock
                .AppendLine($"Grammar: Map 5.1")
                .AppendLine($"Namespace: fhir.datatype")
                .AppendLine($"Target: FHIR_R4")
                ;

        }

        void SaveEditors()
        {
            this.entryEditor.Save();
            this.mapEditor.Save();
        }

        public Int32 GenerateBaseClasses(String outputDir)
        {
            try
            {
                CreateEditors(outputDir);
                ProcessFhirElements();
                SaveEditors();
            }
            catch (ConvertErrorException err)
            {
                this.ConversionError(err.FileName, err.MethodName, err.Message);
            }
            catch (Exception err)
            {
                this.ConversionError(this.GetType().Name, "Execute", err.Message);
            }

            return this.Errors.Any() ? -1 : 0;
        }

        public void Dispose()
        {
        }
    }
}
