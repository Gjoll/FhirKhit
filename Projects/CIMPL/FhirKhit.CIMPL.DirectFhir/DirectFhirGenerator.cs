using FhirKhit.Tools;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;

namespace FhirKhit.CIMPL.DirectFhir
{
    public class DirectFhirGenerator : ConverterBase, IDisposable
    {
        ZipArchive archive;
        CodeEditor entryEditor = new CodeEditor();
        CodeBlockNested entryBlock;

        CodeEditor mapEditor = new CodeEditor();
        CodeBlockNested mapBlock;

        void LoadInputFile(String inputFile)
        {
            const String fcn = "LoadInputFile";

            if (File.Exists(inputFile) == false)
                throw new ConvertErrorException(this.GetType().Name, fcn, "File {inputFile} doesn't exist");

            this.archive = ZipFile.OpenRead(inputFile);
        }

        void ProcessSchemaItemSimpleType(JObject schemaItem, String type, String name)
        {
        }

        void ProcessSchemaItemComplexType(JObject schemaItem, JObject properties, String name)
        {
            CodeBlockNested item = entryBlock.AppendBlock();
            CodeBlockNested vars = entryBlock.AppendBlock();

            String description = (String)  schemaItem.GetValue("description");
            item
                .BlankLine()
                .AppendLine($"// Fhir data element {name} definition")
                .AppendLine($"// {description}")
                .AppendCode($"Entry: {name}")
                ;

            foreach (JToken property in properties.Children())
            {
                String pName = "";
                item
                    .AppendCode($"Property: {pName}")
                    ;

            }
        }

        void ProcessSchemaItem(String name, JObject schemaItem)
        {
            String type = (String) schemaItem["type"];
            JObject properties = (JObject) schemaItem["properties"];
            if ((type != null) && (properties == null))
            {
                ProcessSchemaItemSimpleType(schemaItem, type, name);
            }
            else if ((type == null) && (properties != null))
            {
                ProcessSchemaItemComplexType(schemaItem, properties, name);
            }
            else
                throw new Exception($"Invalid schema item");

        }

        void ProcessFhirSchema()
        {
            const String fcn = "ProcessFhirSchema";

            ZipArchiveEntry schemaArchiveEntry = this.archive.GetEntry("fhir.schema.json.zip");
            if (schemaArchiveEntry == null)
                throw new ConvertErrorException(this.GetType().Name, fcn, "fhir.schema.json.zip not found in archive");

            ZipArchive schemaArchive = new ZipArchive(schemaArchiveEntry.Open());
            ZipArchiveEntry schemaEntry = schemaArchive.GetEntry("fhir.schema.json");
            if (schemaEntry == null)
                throw new ConvertErrorException(this.GetType().Name, fcn, "fhir.schema.json not found in archive");
            StreamReader sr = new StreamReader(schemaEntry.Open());
            dynamic schemaObject = JObject.Parse(sr.ReadToEnd());
            dynamic definitions = schemaObject.definitions;
            foreach (dynamic resourceOneOf in definitions.ResourceList.oneOf)
            {
                String itemPath = resourceOneOf["$ref"].Value;
                String[] itemParts = itemPath.Split('/');
                String item = itemParts[itemParts.Length - 1];
                dynamic definition = definitions[item];
                ProcessSchemaItem(item, (JObject)definition);
            }
        }
        void CreateEditors(String outputDir)
        {
            this.entryEditor = new CodeEditor();
            this.entryEditor.SavePath = Path.Combine(outputDir, "DirectFhir.txt");

            this.mapEditor = new CodeEditor();
            this.mapEditor.SavePath = Path.Combine(outputDir, "DirectFhir_map_r4.txt");

            entryBlock = entryEditor.Blocks.AppendBlock();
            entryBlock
                .AppendLine($"Grammar: DataElement 6.0")
                .AppendLine($"Namespace: fhir.datatype")
                .AppendLine($"Description: \"Base fhir element definitions. Autogenerated\"")
                ;

            mapBlock = mapEditor.Blocks.AppendBlock();
            mapBlock
                .AppendLine($"Grammar: Map 5.1")
                .AppendLine($"Namespace: fhir.datatype")
                .AppendLine($"Target: FHIR_R4")
                ;

        }

        void SaveEditors()
        {
            this.entryEditor.Save();
            this.mapEditor.Save();
        }

        public Int32 Execute(String inputFile, String outputDir)
        {
            try
            {
                LoadInputFile(inputFile);
                CreateEditors(outputDir);
                ProcessFhirSchema();
                SaveEditors();
            }
            catch (ConvertErrorException err)
            {
                this.ConversionError(err.FileName, err.MethodName, err.Message);
            }
            catch (Exception err)
            {
                this.ConversionError(this.GetType().Name, "Execute", err.Message);
            }

            return this.Errors.Any() ? -1 : 0;
        }

        public void Dispose()
        {
            this.archive?.Dispose();
            this.archive = null;
        }
    }
}
