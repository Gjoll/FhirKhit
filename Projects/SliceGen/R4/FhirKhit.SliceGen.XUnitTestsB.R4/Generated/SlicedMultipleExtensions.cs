/*                                                                                                                                          // CSCodeFormatter.cs:54
 * Code in this class was auto generated by SliceGen                                                                                        // CSCodeFormatter.cs:55
*/                                                                                                                                          // CSCodeFormatter.cs:56
using System;                                                                                                                               // CSCodeFormatter.cs:57
using System.Linq;                                                                                                                          // CSCodeFormatter.cs:58
using System.Collections.Generic;                                                                                                           // CSCodeFormatter.cs:59
using System.Reflection;                                                                                                                    // CSCodeFormatter.cs:60
using System.Text;                                                                                                                          // CSCodeFormatter.cs:61
using Hl7.Fhir.Model;                                                                                                                       // CSCodeFormatter.cs:62
using FhirKhit.SliceGen.ShareLib;                                                                                                           // CSCodeFormatter.cs:63
                                                                                                                                            // CSCodeFormatter.cs:64
namespace FhirKhit.Test.R4                                                                                                                  // CSCodeFormatter.cs:65
{                                                                                                                                           // CSCodeFormatter.cs:66
    /// <summary>
    /// Extension class to add slicing helper methods to Observation
    /// </summary>
    public static class SlicedMultipleExtensions
    {                                                                                                                                       // CSCodeFormatter.cs:96
        #region SlicedMultipleExtensions sub classes
        public class Slice1Impl : SliceListAccessorMultiple<Observation.ComponentComponent>                                                 // CSCodeFormatter.cs:344
        {                                                                                                                                   // CSCodeFormatter.cs:345
            #region SlicedMultipleExtensions.Slice1Impl fields
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice1
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing = new Slicing<Observation.ComponentComponent>                            // CSCodeFormatter.cs:378
            {                                                                                                                               // CSCodeFormatter.cs:379
                Discriminators = new ISliceDiscriminator<Observation.ComponentComponent>[]                                                  // CSCodeFormatter.cs:380
                {                                                                                                                           // CSCodeFormatter.cs:381
                    new SliceOnValueDiscriminator<Observation.ComponentComponent, CodeableConcept>                                          // CSCodeFormatter.cs:213
                    {                                                                                                                       // CSCodeFormatter.cs:214
                        Path = "code",                                                                                                      // CSCodeFormatter.cs:215
                        Pattern = Fix_1(),                                                                                                  // CSCodeFormatter.cs:216
                        ValueFilter = ValueFilter_1                                                                                         // CSCodeFormatter.cs:217
                    }                                                                                                                       // CSCodeFormatter.cs:218
                }                                                                                                                           // CSCodeFormatter.cs:393
            };                                                                                                                              // CSCodeFormatter.cs:394
            #endregion  // SlicedMultipleExtensions.Slice1Impl  fields
            #region SlicedMultipleExtensions.Slice1Impl methods
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSCodeFormatter.cs:361
            {                                                                                                                               // CSCodeFormatter.cs:362
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSCodeFormatter.cs:363
                if (retVal.Code == null)                                                                                                    // CSCodeFormatter.cs:643
                    retVal.Code = Fix_1();                                                                                                  // CSCodeFormatter.cs:644
                return retVal;                                                                                                              // CSCodeFormatter.cs:401
            }                                                                                                                               // CSCodeFormatter.cs:402
            /// <summary>
            /// Method to define fixed field used in slice accessor.
            /// </summary>
            static CodeableConcept Fix_1()                                                                                                  // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice1Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal;                                                                                                              // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
            /// <summary>
            /// Return all elements at discriminator path 'code'
            /// </summary>
            static IEnumerable<CodeableConcept> ValueFilter_1(IEnumerable<Observation.ComponentComponent> head)                             // CSCodeFormatter.cs:593
            {                                                                                                                               // CSCodeFormatter.cs:526
                                                                                                                                            // CSCodeFormatter.cs:527
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // CSCodeFormatter.cs:477
                {                                                                                                                           // CSCodeFormatter.cs:478
                    if (inputElements != null)                                                                                              // CSCodeFormatter.cs:479
                    {                                                                                                                       // CSCodeFormatter.cs:480
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // CSCodeFormatter.cs:481
                        {                                                                                                                   // CSCodeFormatter.cs:482
                            yield return inputElement.Code;                                                                                 // CSCodeFormatter.cs:497
                        }                                                                                                                   // CSCodeFormatter.cs:502
                    }                                                                                                                       // CSCodeFormatter.cs:503
                }                                                                                                                           // CSCodeFormatter.cs:504
                IEnumerable<CodeableConcept> result1 = GetChild_1(head);                                                                    // CSCodeFormatter.cs:579
                return result1;                                                                                                             // CSCodeFormatter.cs:583
            }                                                                                                                               // CSCodeFormatter.cs:587
            /// <summary>
            /// Slice1Impl constructor
            /// </summary>
            public Slice1Impl(List<Observation.ComponentComponent> items)                                                                   // CSCodeFormatter.cs:312
            {                                                                                                                               // CSCodeFormatter.cs:313
                this.Items = items;                                                                                                         // CSCodeFormatter.cs:314
                this.Slicing = slicing;                                                                                                     // CSCodeFormatter.cs:315
            }                                                                                                                               // CSCodeFormatter.cs:316
            #endregion // SlicedMultipleExtensions.Slice1Impl  methods
        }                                                                                                                                   // CSCodeFormatter.cs:356
        public class Slice2Impl : SliceListAccessorMultiple<Observation.ComponentComponent>                                                 // CSCodeFormatter.cs:344
        {                                                                                                                                   // CSCodeFormatter.cs:345
            #region SlicedMultipleExtensions.Slice2Impl fields
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice2
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing = new Slicing<Observation.ComponentComponent>                            // CSCodeFormatter.cs:378
            {                                                                                                                               // CSCodeFormatter.cs:379
                Discriminators = new ISliceDiscriminator<Observation.ComponentComponent>[]                                                  // CSCodeFormatter.cs:380
                {                                                                                                                           // CSCodeFormatter.cs:381
                    new SliceOnValueDiscriminator<Observation.ComponentComponent, CodeableConcept>                                          // CSCodeFormatter.cs:213
                    {                                                                                                                       // CSCodeFormatter.cs:214
                        Path = "code",                                                                                                      // CSCodeFormatter.cs:215
                        Pattern = Fix_1(),                                                                                                  // CSCodeFormatter.cs:216
                        ValueFilter = ValueFilter_1                                                                                         // CSCodeFormatter.cs:217
                    }                                                                                                                       // CSCodeFormatter.cs:218
                }                                                                                                                           // CSCodeFormatter.cs:393
            };                                                                                                                              // CSCodeFormatter.cs:394
            #endregion  // SlicedMultipleExtensions.Slice2Impl  fields
            #region SlicedMultipleExtensions.Slice2Impl methods
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSCodeFormatter.cs:361
            {                                                                                                                               // CSCodeFormatter.cs:362
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSCodeFormatter.cs:363
                if (retVal.Code == null)                                                                                                    // CSCodeFormatter.cs:643
                    retVal.Code = Fix_1();                                                                                                  // CSCodeFormatter.cs:644
                return retVal;                                                                                                              // CSCodeFormatter.cs:401
            }                                                                                                                               // CSCodeFormatter.cs:402
            /// <summary>
            /// Method to define fixed field used in slice accessor.
            /// </summary>
            static CodeableConcept Fix_1()                                                                                                  // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice2Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal;                                                                                                              // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
            /// <summary>
            /// Return all elements at discriminator path 'code'
            /// </summary>
            static IEnumerable<CodeableConcept> ValueFilter_1(IEnumerable<Observation.ComponentComponent> head)                             // CSCodeFormatter.cs:593
            {                                                                                                                               // CSCodeFormatter.cs:526
                                                                                                                                            // CSCodeFormatter.cs:527
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // CSCodeFormatter.cs:477
                {                                                                                                                           // CSCodeFormatter.cs:478
                    if (inputElements != null)                                                                                              // CSCodeFormatter.cs:479
                    {                                                                                                                       // CSCodeFormatter.cs:480
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // CSCodeFormatter.cs:481
                        {                                                                                                                   // CSCodeFormatter.cs:482
                            yield return inputElement.Code;                                                                                 // CSCodeFormatter.cs:497
                        }                                                                                                                   // CSCodeFormatter.cs:502
                    }                                                                                                                       // CSCodeFormatter.cs:503
                }                                                                                                                           // CSCodeFormatter.cs:504
                IEnumerable<CodeableConcept> result1 = GetChild_1(head);                                                                    // CSCodeFormatter.cs:579
                return result1;                                                                                                             // CSCodeFormatter.cs:583
            }                                                                                                                               // CSCodeFormatter.cs:587
            /// <summary>
            /// Slice2Impl constructor
            /// </summary>
            public Slice2Impl(List<Observation.ComponentComponent> items)                                                                   // CSCodeFormatter.cs:312
            {                                                                                                                               // CSCodeFormatter.cs:313
                this.Items = items;                                                                                                         // CSCodeFormatter.cs:314
                this.Slicing = slicing;                                                                                                     // CSCodeFormatter.cs:315
            }                                                                                                                               // CSCodeFormatter.cs:316
            #endregion // SlicedMultipleExtensions.Slice2Impl  methods
        }                                                                                                                                   // CSCodeFormatter.cs:356
        #endregion
        #region fields SlicedMultipleExtensions fields
        #endregion
        #region methods SlicedMultipleExtensions methods
        /// <summary>
        /// Extension method to return slice Slice1 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// ISliceListAccessorMultiple<Observation.ComponentComponent> sliceAccessor = resource.Component.Slice1();
        /// </example>
        public static Slice1Impl Slice1(this List<Observation.ComponentComponent> item)                                                     // CSCodeFormatter.cs:272
        {                                                                                                                                   // CSCodeFormatter.cs:273
            Slice1Impl retVal = new Slice1Impl(item);                                                                                       // CSCodeFormatter.cs:274
            return retVal;                                                                                                                  // CSCodeFormatter.cs:275
        }                                                                                                                                   // CSCodeFormatter.cs:276
        /// <summary>
        /// Extension method to return slice Slice2 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// ISliceListAccessorMultiple<Observation.ComponentComponent> sliceAccessor = resource.Component.Slice2();
        /// </example>
        public static Slice2Impl Slice2(this List<Observation.ComponentComponent> item)                                                     // CSCodeFormatter.cs:272
        {                                                                                                                                   // CSCodeFormatter.cs:273
            Slice2Impl retVal = new Slice2Impl(item);                                                                                       // CSCodeFormatter.cs:274
            return retVal;                                                                                                                  // CSCodeFormatter.cs:275
        }                                                                                                                                   // CSCodeFormatter.cs:276
        #endregion
    }                                                                                                                                       // CSCodeFormatter.cs:117
}                                                                                                                                           // CSCodeFormatter.cs:77
