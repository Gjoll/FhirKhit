/*                                                                                                                                          // CSCodeFormatter.cs:46
 * Code in this class was auto generated by SliceGen                                                                                        // CSCodeFormatter.cs:47
*/                                                                                                                                          // CSCodeFormatter.cs:48
using System;                                                                                                                               // CSCodeFormatter.cs:49
using System.Linq;                                                                                                                          // CSCodeFormatter.cs:50
using System.Collections.Generic;                                                                                                           // CSCodeFormatter.cs:51
using System.Reflection;                                                                                                                    // CSCodeFormatter.cs:52
using System.Text;                                                                                                                          // CSCodeFormatter.cs:53
using Hl7.Fhir.Model;                                                                                                                       // CSCodeFormatter.cs:54
using FhirKhit.SliceGen.ShareLib;                                                                                                           // CSCodeFormatter.cs:55
                                                                                                                                            // CSCodeFormatter.cs:56
namespace FhirKhit.Test.R4                                                                                                                  // CSCodeFormatter.cs:57
{                                                                                                                                           // CSCodeFormatter.cs:58
                                                                                                                                            // CodeBlockNested.cs:318
    /// <summary>
    /// Extension class to add slicing helper methods to Observation
    /// </summary>
    public static class SlicedMultipleExtensions
    {                                                                                                                                       // CSCodeFormatter.cs:88
        #region classes
        public class Slice1Impl : SliceListAccessorMultiple<Observation.ComponentComponent>                                                 // CSCodeFormatter.cs:303
        {                                                                                                                                   // CSCodeFormatter.cs:304
            #region fields
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Pointer to element containing all slice(s) elements
            /// </summary>
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice1
            /// </summary>
            static Slicing slicing = new Slicing                                                                                            // CSCodeFormatter.cs:334
            {                                                                                                                               // CSCodeFormatter.cs:335
                Discriminators = new ISliceDiscriminator[]                                                                                  // CSCodeFormatter.cs:336
                {                                                                                                                           // CSCodeFormatter.cs:337
                    new SliceOnValueDiscriminator                                                                                           // CSCodeFormatter.cs:202
                    {                                                                                                                       // CSCodeFormatter.cs:203
                        Path = "code",                                                                                                      // CSCodeFormatter.cs:204
                        Pattern = Fix_1()                                                                                                   // CSCodeFormatter.cs:205
                    }                                                                                                                       // CSCodeFormatter.cs:206
                }                                                                                                                           // CSCodeFormatter.cs:349
            };                                                                                                                              // CSCodeFormatter.cs:350
            #endregion
            #region methods
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Method to define fixed field used in slice accessor.
            /// </summary>
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Method to find element at simple fhir path 'code'.
            /// </summary>
            private IEnumerable<Element> FhirPath(List<Observation.ComponentComponent> head)                                                // GenerateSimpleFhirPathMethod.cs:102
            {                                                                                                                               // GenerateSimpleFhirPathMethod.cs:103
                                                                                                                                            // GenerateSimpleFhirPathMethod.cs:104
                IEnumerable<Observation.ComponentComponent> results0 = head;                                                                // GenerateSimpleFhirPathMethod.cs:112
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // GenerateSimpleFhirPathMethod.cs:54
                {                                                                                                                           // GenerateSimpleFhirPathMethod.cs:55
                    if (inputElements != null)                                                                                              // GenerateSimpleFhirPathMethod.cs:56
                    {                                                                                                                       // GenerateSimpleFhirPathMethod.cs:57
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // GenerateSimpleFhirPathMethod.cs:58
                        {                                                                                                                   // GenerateSimpleFhirPathMethod.cs:59
                            yield return inputElement.Code;                                                                                 // GenerateSimpleFhirPathMethod.cs:74
                        }                                                                                                                   // GenerateSimpleFhirPathMethod.cs:79
                    }                                                                                                                       // GenerateSimpleFhirPathMethod.cs:80
                }                                                                                                                           // GenerateSimpleFhirPathMethod.cs:81
                IEnumerable<CodeableConcept> results1 = GetChild_1(results0);                                                               // GenerateSimpleFhirPathMethod.cs:166
                return results1;                                                                                                            // GenerateSimpleFhirPathMethod.cs:171
            }                                                                                                                               // GenerateSimpleFhirPathMethod.cs:175
            static CodeableConcept Fix_1()                                                                                                  // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice1Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal = new CodeableConcept();                                                                                      // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Slice1Impl constructor
            /// </summary>
            public Slice1Impl(List<Observation.ComponentComponent> items)                                                                   // CSCodeFormatter.cs:252
            {                                                                                                                               // CSCodeFormatter.cs:253
                this.items = items;                                                                                                         // CSCodeFormatter.cs:254
                this.Slicing = slicing;                                                                                                     // CSCodeFormatter.cs:255
            }                                                                                                                               // CSCodeFormatter.cs:256
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// method to initialize slice item with any fixed values
            /// </summary>
            public void Initialize(Observation.ComponentComponent item)                                                                     // CSCodeFormatter.cs:266
            {                                                                                                                               // CSCodeFormatter.cs:267
            }                                                                                                                               // CSCodeFormatter.cs:268
            #endregion
        }                                                                                                                                   // CSCodeFormatter.cs:314
        public class Slice2Impl : SliceListAccessorMultiple<Observation.ComponentComponent>                                                 // CSCodeFormatter.cs:303
        {                                                                                                                                   // CSCodeFormatter.cs:304
            #region fields
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Pointer to element containing all slice(s) elements
            /// </summary>
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice2
            /// </summary>
            static Slicing slicing = new Slicing                                                                                            // CSCodeFormatter.cs:334
            {                                                                                                                               // CSCodeFormatter.cs:335
                Discriminators = new ISliceDiscriminator[]                                                                                  // CSCodeFormatter.cs:336
                {                                                                                                                           // CSCodeFormatter.cs:337
                    new SliceOnValueDiscriminator                                                                                           // CSCodeFormatter.cs:202
                    {                                                                                                                       // CSCodeFormatter.cs:203
                        Path = "code",                                                                                                      // CSCodeFormatter.cs:204
                        Pattern = Fix_1()                                                                                                   // CSCodeFormatter.cs:205
                    }                                                                                                                       // CSCodeFormatter.cs:206
                }                                                                                                                           // CSCodeFormatter.cs:349
            };                                                                                                                              // CSCodeFormatter.cs:350
            #endregion
            #region methods
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Method to define fixed field used in slice accessor.
            /// </summary>
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Method to find element at simple fhir path 'code'.
            /// </summary>
            private IEnumerable<Element> FhirPath(List<Observation.ComponentComponent> head)                                                // GenerateSimpleFhirPathMethod.cs:102
            {                                                                                                                               // GenerateSimpleFhirPathMethod.cs:103
                                                                                                                                            // GenerateSimpleFhirPathMethod.cs:104
                IEnumerable<Observation.ComponentComponent> results0 = head;                                                                // GenerateSimpleFhirPathMethod.cs:112
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // GenerateSimpleFhirPathMethod.cs:54
                {                                                                                                                           // GenerateSimpleFhirPathMethod.cs:55
                    if (inputElements != null)                                                                                              // GenerateSimpleFhirPathMethod.cs:56
                    {                                                                                                                       // GenerateSimpleFhirPathMethod.cs:57
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // GenerateSimpleFhirPathMethod.cs:58
                        {                                                                                                                   // GenerateSimpleFhirPathMethod.cs:59
                            yield return inputElement.Code;                                                                                 // GenerateSimpleFhirPathMethod.cs:74
                        }                                                                                                                   // GenerateSimpleFhirPathMethod.cs:79
                    }                                                                                                                       // GenerateSimpleFhirPathMethod.cs:80
                }                                                                                                                           // GenerateSimpleFhirPathMethod.cs:81
                IEnumerable<CodeableConcept> results1 = GetChild_1(results0);                                                               // GenerateSimpleFhirPathMethod.cs:166
                return results1;                                                                                                            // GenerateSimpleFhirPathMethod.cs:171
            }                                                                                                                               // GenerateSimpleFhirPathMethod.cs:175
            static CodeableConcept Fix_1()                                                                                                  // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice2Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal = new CodeableConcept();                                                                                      // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// Slice2Impl constructor
            /// </summary>
            public Slice2Impl(List<Observation.ComponentComponent> items)                                                                   // CSCodeFormatter.cs:252
            {                                                                                                                               // CSCodeFormatter.cs:253
                this.items = items;                                                                                                         // CSCodeFormatter.cs:254
                this.Slicing = slicing;                                                                                                     // CSCodeFormatter.cs:255
            }                                                                                                                               // CSCodeFormatter.cs:256
                                                                                                                                            // CodeBlockNested.cs:318
            /// <summary>
            /// method to initialize slice item with any fixed values
            /// </summary>
            public void Initialize(Observation.ComponentComponent item)                                                                     // CSCodeFormatter.cs:266
            {                                                                                                                               // CSCodeFormatter.cs:267
            }                                                                                                                               // CSCodeFormatter.cs:268
            #endregion
        }                                                                                                                                   // CSCodeFormatter.cs:314
        #endregion
        #region fields
        #endregion
        #region methods
                                                                                                                                            // CodeBlockNested.cs:318
        /// <summary>
        /// Extension method to return slice Slice1 on component
        /// </summary>
        public static Slice1Impl Slice1(this List<Observation.ComponentComponent> item)                                                     // CSCodeFormatter.cs:236
        {                                                                                                                                   // CSCodeFormatter.cs:237
            Slice1Impl retVal = new Slice1Impl(item);                                                                                       // CSCodeFormatter.cs:238
            return retVal;                                                                                                                  // CSCodeFormatter.cs:239
        }                                                                                                                                   // CSCodeFormatter.cs:240
                                                                                                                                            // CodeBlockNested.cs:318
        /// <summary>
        /// Extension method to return slice Slice2 on component
        /// </summary>
        public static Slice2Impl Slice2(this List<Observation.ComponentComponent> item)                                                     // CSCodeFormatter.cs:236
        {                                                                                                                                   // CSCodeFormatter.cs:237
            Slice2Impl retVal = new Slice2Impl(item);                                                                                       // CSCodeFormatter.cs:238
            return retVal;                                                                                                                  // CSCodeFormatter.cs:239
        }                                                                                                                                   // CSCodeFormatter.cs:240
        #endregion
    }                                                                                                                                       // CSCodeFormatter.cs:109
}                                                                                                                                           // CSCodeFormatter.cs:69
