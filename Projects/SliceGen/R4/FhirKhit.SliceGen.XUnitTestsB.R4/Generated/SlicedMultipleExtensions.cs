/*                                                                                                                                          // CSCodeFormatter.cs:49
 * Code in this class was auto generated by SliceGen                                                                                        // CSCodeFormatter.cs:50
*/                                                                                                                                          // CSCodeFormatter.cs:51
using System;                                                                                                                               // CSCodeFormatter.cs:52
using System.Linq;                                                                                                                          // CSCodeFormatter.cs:53
using System.Collections.Generic;                                                                                                           // CSCodeFormatter.cs:54
using System.Reflection;                                                                                                                    // CSCodeFormatter.cs:55
using System.Text;                                                                                                                          // CSCodeFormatter.cs:56
using Hl7.Fhir.Model;                                                                                                                       // CSCodeFormatter.cs:57
using FhirKhit.SliceGen.SharedLib;                                                                                                          // CSCodeFormatter.cs:58
                                                                                                                                            // CSCodeFormatter.cs:59
namespace FhirKhit.Test.R4                                                                                                                  // CSCodeFormatter.cs:60
{                                                                                                                                           // CSCodeFormatter.cs:61
                                                                                                                                            // CSCodeFormatter.cs:89
    /// <summary>
    /// Extension class to add slicing helper methods to Observation
    /// </summary>
    public static class SlicedMultipleExtensions
    {                                                                                                                                       // CSCodeFormatter.cs:94
        #region SlicedMultipleExtensions sub classes
                                                                                                                                            // CSSliceCreator.cs:276
        /// <summary>
        /// public interface that implements the functionality of slice Slice1Impl
        /// </summary>
        public interface ISlice1 : ISliceAccessorMultiple<Observation.ComponentComponent>                                                   // CSSliceCreator.cs:280
        {                                                                                                                                   // CSSliceCreator.cs:281
        }                                                                                                                                   // CSSliceCreator.cs:282
                                                                                                                                            // CSSliceCreator.cs:283
        /// <summary>
        /// private class that implements the functionality of slice Slice1Impl
        /// 
        /// {
        ///   "id": "Observation.component:Slice1",
        ///   "path": "Observation.component",
        ///   "sliceName": "Slice1",
        ///   "short": "Component results",
        ///   "definition": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
        ///   "comment": "For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.",
        ///   "requirements": "Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.",
        ///   "min": 0,
        ///   "max": "*",
        ///   "base": {
        ///     "path": "Observation.component",
        ///     "min": 0,
        ///     "max": "*"
        ///   },
        ///   "type": [
        ///     {
        ///       "code": "BackboneElement"
        ///     }
        ///   ],
        ///   "constraint": [
        ///     {
        ///       "key": "ele-1",
        ///       "severity": "error",
        ///       "human": "All FHIR elements must have a @value or children",
        ///       "expression": "hasValue() or (children().count() > id.count())",
        ///       "xpath": "@value|f:*|h:div",
        ///       "source": "Element"
        ///     }
        ///   ],
        ///   "isModifier": false,
        ///   "isSummary": true,
        ///   "mapping": [
        ///     {
        ///       "identity": "v2",
        ///       "map": "containment by OBX-4?"
        ///     },
        ///     {
        ///       "identity": "rim",
        ///       "map": "outBoundRelationship[typeCode=COMP]"
        ///     }
        ///   ]
        /// }
        /// </summary>
        class Slice1Impl : SliceListAccessorMultiple<Observation.ComponentComponent>, ISlice1                                               // CSSliceCreator.cs:289
        {                                                                                                                                   // CSSliceCreator.cs:290
                                                                                                                                            // CSSliceCreator.cs:321
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice1
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing;                                                                         // CSSliceCreator.cs:325
            /// <summary>
            /// Static constructor
            /// </summary>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1810:Initialize reference type static fields inline")]
            static Slice1Impl()                                                                                                             // CSSliceCreator.cs:303
            {                                                                                                                               // CSSliceCreator.cs:304
                                                                                                                                            // CSSliceCreator.cs:329
                // Instantiate slicing discriminator
                {                                                                                                                           // CSSliceCreator.cs:344
                    ISliceDiscriminator<Observation.ComponentComponent>[] discriminators =                                                  // CSSliceCreator.cs:345
                        new ISliceDiscriminator<Observation.ComponentComponent>[1];                                                         // CSSliceCreator.cs:346
                    {                                                                                                                       // CSSliceCreator.cs:113
                        /// Define discriminator'
                        /// {
                        ///   "type": "value",
                        ///   "path": "code"
                        /// }
                        var sliceOnValueDiscriminator = new SliceOnValueDiscriminator<Observation.ComponentComponent, CodeableConcept>()    // CSSliceCreator.cs:116
                        {                                                                                                                   // CSSliceCreator.cs:117
                            Path = "code",                                                                                                  // CSSliceCreator.cs:118
                            ValueFilter = ValueFilterComponentSlice1Code                                                                    // CSSliceCreator.cs:119
                        };                                                                                                                  // CSSliceCreator.cs:120
                        {                                                                                                                   // ElementFixCode.cs:766
                            CodeableConcept temp = new CodeableConcept();                                                                   // ElementFixCode.cs:767
                            temp.Coding = new List<Coding>();                                                                               // ElementFixCode.cs:773
                            {                                                                                                               // ElementFixCode.cs:776
                                var temp2 = new Coding();                                                                                   // ElementFixCode.cs:777
                                temp2.SystemElement = new FhirUri();                                                                        // ElementFixCode.cs:780
                                temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                              // ElementFixCode.cs:782
                                temp2.CodeElement = new Code();                                                                             // ElementFixCode.cs:796
                                temp2.CodeElement.Value = "Slice1Code";                                                                     // ElementFixCode.cs:798
                                temp.Coding.Add(temp2);                                                                                     // ElementFixCode.cs:825
                            }                                                                                                               // ElementFixCode.cs:826
                            sliceOnValueDiscriminator.Pattern = temp;                                                                       // ElementFixCode.cs:841
                        }                                                                                                                   // ElementFixCode.cs:842
                        discriminators[0] = sliceOnValueDiscriminator;                                                                      // CSSliceCreator.cs:126
                    }                                                                                                                       // CSSliceCreator.cs:127
                    slicing = new Slicing<Observation.ComponentComponent>                                                                   // CSSliceCreator.cs:356
                    {                                                                                                                       // CSSliceCreator.cs:357
                        Discriminators = discriminators                                                                                     // CSSliceCreator.cs:358
                    };                                                                                                                      // CSSliceCreator.cs:359
                }                                                                                                                           // CSSliceCreator.cs:360
            }                                                                                                                               // CSSliceCreator.cs:306
                                                                                                                                            // CSSliceCreator.cs:226
            /// <summary>
            /// Slice1Impl constructor
            /// </summary>
            public Slice1Impl(List<Observation.ComponentComponent> items)                                                                   // CSSliceCreator.cs:230
            {                                                                                                                               // CSSliceCreator.cs:231
                this.Items = items;                                                                                                         // CSSliceCreator.cs:232
                this.Slicing = slicing;                                                                                                     // CSSliceCreator.cs:233
            }                                                                                                                               // CSSliceCreator.cs:234
                                                                                                                                            // CSSliceCreator.cs:96
            /// <summary>
            /// Return all elements for discriminator # 1'                                                                                  // CSSliceCreator.cs:98
            /// {
            ///   "type": "value",
            ///   "path": "code"
            /// }
            /// </summary>
            static IEnumerable<CodeableConcept> ValueFilterComponentSlice1Code(IEnumerable<Observation.ComponentComponent> head)            // GenerateFhirPathSearch.cs:172
            {                                                                                                                               // GenerateFhirPathSearch.cs:105
                                                                                                                                            // GenerateFhirPathSearch.cs:106
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // GenerateFhirPathSearch.cs:43
                {                                                                                                                           // GenerateFhirPathSearch.cs:44
                    if (inputElements != null)                                                                                              // GenerateFhirPathSearch.cs:45
                    {                                                                                                                       // GenerateFhirPathSearch.cs:46
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // GenerateFhirPathSearch.cs:47
                        {                                                                                                                   // GenerateFhirPathSearch.cs:48
                            yield return inputElement.Code;                                                                                 // GenerateFhirPathSearch.cs:63
                        }                                                                                                                   // GenerateFhirPathSearch.cs:68
                    }                                                                                                                       // GenerateFhirPathSearch.cs:69
                }                                                                                                                           // GenerateFhirPathSearch.cs:70
                IEnumerable<CodeableConcept> result1 = GetChild_1(head);                                                                    // GenerateFhirPathSearch.cs:158
                return result1;                                                                                                             // GenerateFhirPathSearch.cs:165
            }                                                                                                                               // GenerateFhirPathSearch.cs:166
                                                                                                                                            // CSSliceCreator.cs:412
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSSliceCreator.cs:416
            {                                                                                                                               // CSSliceCreator.cs:417
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSSliceCreator.cs:418
                //$CodeableConcept var3 = System.String[]();                                                                                // CSSliceCreator.cs:384
                //$retVal.Code = var3;                                                                                                      // CSSliceCreator.cs:388
                return retVal;                                                                                                              // CSSliceCreator.cs:422
            }                                                                                                                               // CSSliceCreator.cs:423
        }                                                                                                                                   // CSSliceCreator.cs:295
                                                                                                                                            // CSSliceCreator.cs:276
        /// <summary>
        /// public interface that implements the functionality of slice Slice2Impl
        /// </summary>
        public interface ISlice2 : ISliceAccessorMultiple<Observation.ComponentComponent>                                                   // CSSliceCreator.cs:280
        {                                                                                                                                   // CSSliceCreator.cs:281
        }                                                                                                                                   // CSSliceCreator.cs:282
                                                                                                                                            // CSSliceCreator.cs:283
        /// <summary>
        /// private class that implements the functionality of slice Slice2Impl
        /// 
        /// {
        ///   "id": "Observation.component:Slice2",
        ///   "path": "Observation.component",
        ///   "sliceName": "Slice2",
        ///   "short": "Component results",
        ///   "definition": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
        ///   "comment": "For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.",
        ///   "requirements": "Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.",
        ///   "min": 0,
        ///   "max": "*",
        ///   "base": {
        ///     "path": "Observation.component",
        ///     "min": 0,
        ///     "max": "*"
        ///   },
        ///   "type": [
        ///     {
        ///       "code": "BackboneElement"
        ///     }
        ///   ],
        ///   "constraint": [
        ///     {
        ///       "key": "ele-1",
        ///       "severity": "error",
        ///       "human": "All FHIR elements must have a @value or children",
        ///       "expression": "hasValue() or (children().count() > id.count())",
        ///       "xpath": "@value|f:*|h:div",
        ///       "source": "Element"
        ///     }
        ///   ],
        ///   "isModifier": false,
        ///   "isSummary": true,
        ///   "mapping": [
        ///     {
        ///       "identity": "v2",
        ///       "map": "containment by OBX-4?"
        ///     },
        ///     {
        ///       "identity": "rim",
        ///       "map": "outBoundRelationship[typeCode=COMP]"
        ///     }
        ///   ]
        /// }
        /// </summary>
        class Slice2Impl : SliceListAccessorMultiple<Observation.ComponentComponent>, ISlice2                                               // CSSliceCreator.cs:289
        {                                                                                                                                   // CSSliceCreator.cs:290
                                                                                                                                            // CSSliceCreator.cs:321
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice2
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing;                                                                         // CSSliceCreator.cs:325
            /// <summary>
            /// Static constructor
            /// </summary>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1810:Initialize reference type static fields inline")]
            static Slice2Impl()                                                                                                             // CSSliceCreator.cs:303
            {                                                                                                                               // CSSliceCreator.cs:304
                                                                                                                                            // CSSliceCreator.cs:329
                // Instantiate slicing discriminator
                {                                                                                                                           // CSSliceCreator.cs:344
                    ISliceDiscriminator<Observation.ComponentComponent>[] discriminators =                                                  // CSSliceCreator.cs:345
                        new ISliceDiscriminator<Observation.ComponentComponent>[1];                                                         // CSSliceCreator.cs:346
                    {                                                                                                                       // CSSliceCreator.cs:113
                        /// Define discriminator'
                        /// {
                        ///   "type": "value",
                        ///   "path": "code"
                        /// }
                        var sliceOnValueDiscriminator = new SliceOnValueDiscriminator<Observation.ComponentComponent, CodeableConcept>()    // CSSliceCreator.cs:116
                        {                                                                                                                   // CSSliceCreator.cs:117
                            Path = "code",                                                                                                  // CSSliceCreator.cs:118
                            ValueFilter = ValueFilterComponentSlice2Code                                                                    // CSSliceCreator.cs:119
                        };                                                                                                                  // CSSliceCreator.cs:120
                        {                                                                                                                   // ElementFixCode.cs:766
                            CodeableConcept temp = new CodeableConcept();                                                                   // ElementFixCode.cs:767
                            temp.Coding = new List<Coding>();                                                                               // ElementFixCode.cs:773
                            {                                                                                                               // ElementFixCode.cs:776
                                var temp2 = new Coding();                                                                                   // ElementFixCode.cs:777
                                temp2.SystemElement = new FhirUri();                                                                        // ElementFixCode.cs:780
                                temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                              // ElementFixCode.cs:782
                                temp2.CodeElement = new Code();                                                                             // ElementFixCode.cs:796
                                temp2.CodeElement.Value = "Slice2Code";                                                                     // ElementFixCode.cs:798
                                temp.Coding.Add(temp2);                                                                                     // ElementFixCode.cs:825
                            }                                                                                                               // ElementFixCode.cs:826
                            sliceOnValueDiscriminator.Pattern = temp;                                                                       // ElementFixCode.cs:841
                        }                                                                                                                   // ElementFixCode.cs:842
                        discriminators[0] = sliceOnValueDiscriminator;                                                                      // CSSliceCreator.cs:126
                    }                                                                                                                       // CSSliceCreator.cs:127
                    slicing = new Slicing<Observation.ComponentComponent>                                                                   // CSSliceCreator.cs:356
                    {                                                                                                                       // CSSliceCreator.cs:357
                        Discriminators = discriminators                                                                                     // CSSliceCreator.cs:358
                    };                                                                                                                      // CSSliceCreator.cs:359
                }                                                                                                                           // CSSliceCreator.cs:360
            }                                                                                                                               // CSSliceCreator.cs:306
                                                                                                                                            // CSSliceCreator.cs:226
            /// <summary>
            /// Slice2Impl constructor
            /// </summary>
            public Slice2Impl(List<Observation.ComponentComponent> items)                                                                   // CSSliceCreator.cs:230
            {                                                                                                                               // CSSliceCreator.cs:231
                this.Items = items;                                                                                                         // CSSliceCreator.cs:232
                this.Slicing = slicing;                                                                                                     // CSSliceCreator.cs:233
            }                                                                                                                               // CSSliceCreator.cs:234
                                                                                                                                            // CSSliceCreator.cs:96
            /// <summary>
            /// Return all elements for discriminator # 1'                                                                                  // CSSliceCreator.cs:98
            /// {
            ///   "type": "value",
            ///   "path": "code"
            /// }
            /// </summary>
            static IEnumerable<CodeableConcept> ValueFilterComponentSlice2Code(IEnumerable<Observation.ComponentComponent> head)            // GenerateFhirPathSearch.cs:172
            {                                                                                                                               // GenerateFhirPathSearch.cs:105
                                                                                                                                            // GenerateFhirPathSearch.cs:106
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // GenerateFhirPathSearch.cs:43
                {                                                                                                                           // GenerateFhirPathSearch.cs:44
                    if (inputElements != null)                                                                                              // GenerateFhirPathSearch.cs:45
                    {                                                                                                                       // GenerateFhirPathSearch.cs:46
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // GenerateFhirPathSearch.cs:47
                        {                                                                                                                   // GenerateFhirPathSearch.cs:48
                            yield return inputElement.Code;                                                                                 // GenerateFhirPathSearch.cs:63
                        }                                                                                                                   // GenerateFhirPathSearch.cs:68
                    }                                                                                                                       // GenerateFhirPathSearch.cs:69
                }                                                                                                                           // GenerateFhirPathSearch.cs:70
                IEnumerable<CodeableConcept> result1 = GetChild_1(head);                                                                    // GenerateFhirPathSearch.cs:158
                return result1;                                                                                                             // GenerateFhirPathSearch.cs:165
            }                                                                                                                               // GenerateFhirPathSearch.cs:166
                                                                                                                                            // CSSliceCreator.cs:412
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSSliceCreator.cs:416
            {                                                                                                                               // CSSliceCreator.cs:417
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSSliceCreator.cs:418
                //$CodeableConcept var3 = System.String[]();                                                                                // CSSliceCreator.cs:384
                //$retVal.Code = var3;                                                                                                      // CSSliceCreator.cs:388
                return retVal;                                                                                                              // CSSliceCreator.cs:422
            }                                                                                                                               // CSSliceCreator.cs:423
        }                                                                                                                                   // CSSliceCreator.cs:295
        #endregion
        #region fields SlicedMultipleExtensions fields
        #endregion
        #region methods SlicedMultipleExtensions methods
                                                                                                                                            // CSSliceCreator.cs:179
        /// <summary>
        /// Extension method to return slice Slice1 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// SlicedMultipleExtensions.ISlice1 sliceAccessor = resource.Component.Slice1();
        /// </example>
        public static ISlice1 Slice1(this List<Observation.ComponentComponent> item)                                                        // CSSliceCreator.cs:187
        {                                                                                                                                   // CSSliceCreator.cs:188
            Slice1Impl retVal = new Slice1Impl(item);                                                                                       // CSSliceCreator.cs:189
            return retVal;                                                                                                                  // CSSliceCreator.cs:190
        }                                                                                                                                   // CSSliceCreator.cs:191
                                                                                                                                            // CSSliceCreator.cs:179
        /// <summary>
        /// Extension method to return slice Slice2 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// SlicedMultipleExtensions.ISlice2 sliceAccessor = resource.Component.Slice2();
        /// </example>
        public static ISlice2 Slice2(this List<Observation.ComponentComponent> item)                                                        // CSSliceCreator.cs:187
        {                                                                                                                                   // CSSliceCreator.cs:188
            Slice2Impl retVal = new Slice2Impl(item);                                                                                       // CSSliceCreator.cs:189
            return retVal;                                                                                                                  // CSSliceCreator.cs:190
        }                                                                                                                                   // CSSliceCreator.cs:191
        #endregion
    }                                                                                                                                       // CSCodeFormatter.cs:115
}                                                                                                                                           // CSCodeFormatter.cs:72
