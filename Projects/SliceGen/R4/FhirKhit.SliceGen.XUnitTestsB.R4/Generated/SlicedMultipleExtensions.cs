/*                                                                                                                                          // CSCodeFormatter.cs:49
 * Code in this class was auto generated by SliceGen                                                                                        // CSCodeFormatter.cs:50
*/                                                                                                                                          // CSCodeFormatter.cs:51
using System;                                                                                                                               // CSCodeFormatter.cs:52
using System.Linq;                                                                                                                          // CSCodeFormatter.cs:53
using System.Collections.Generic;                                                                                                           // CSCodeFormatter.cs:54
using System.Reflection;                                                                                                                    // CSCodeFormatter.cs:55
using System.Text;                                                                                                                          // CSCodeFormatter.cs:56
using Hl7.Fhir.Model;                                                                                                                       // CSCodeFormatter.cs:57
using FhirKhit.SliceGen.SharedLib;                                                                                                          // CSCodeFormatter.cs:58
                                                                                                                                            // CSCodeFormatter.cs:59
namespace FhirKhit.Test.R4                                                                                                                  // CSCodeFormatter.cs:60
{                                                                                                                                           // CSCodeFormatter.cs:61
                                                                                                                                            // CSCodeFormatter.cs:89
    /// <summary>
    /// Extension class to add slicing helper methods to Observation
    /// </summary>
    public static class SlicedMultipleExtensions
    {                                                                                                                                       // CSCodeFormatter.cs:94
        #region SlicedMultipleExtensions sub classes
                                                                                                                                            // CSSliceCreator.cs:274
        /// <summary>
        /// public interface that implements the functionality of slice Slice1Impl
        /// </summary>
        public interface ISlice1 : ISliceAccessorMultiple<Observation.ComponentComponent>                                                   // CSSliceCreator.cs:278
        {                                                                                                                                   // CSSliceCreator.cs:279
        }                                                                                                                                   // CSSliceCreator.cs:280
                                                                                                                                            // CSSliceCreator.cs:281
        /// <summary>
        /// private class that implements the functionality of slice Slice1Impl
        /// 
        /// {
        ///   "id": "Observation.component:Slice1",
        ///   "path": "Observation.component",
        ///   "sliceName": "Slice1",
        ///   "short": "Component results",
        ///   "definition": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
        ///   "comment": "For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.",
        ///   "requirements": "Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.",
        ///   "min": 0,
        ///   "max": "*",
        ///   "base": {
        ///     "path": "Observation.component",
        ///     "min": 0,
        ///     "max": "*"
        ///   },
        ///   "type": [
        ///     {
        ///       "code": "BackboneElement"
        ///     }
        ///   ],
        ///   "constraint": [
        ///     {
        ///       "key": "ele-1",
        ///       "severity": "error",
        ///       "human": "All FHIR elements must have a @value or children",
        ///       "expression": "hasValue() or (children().count() > id.count())",
        ///       "xpath": "@value|f:*|h:div",
        ///       "source": "Element"
        ///     }
        ///   ],
        ///   "isModifier": false,
        ///   "isSummary": true,
        ///   "mapping": [
        ///     {
        ///       "identity": "v2",
        ///       "map": "containment by OBX-4?"
        ///     },
        ///     {
        ///       "identity": "rim",
        ///       "map": "outBoundRelationship[typeCode=COMP]"
        ///     }
        ///   ]
        /// }
        /// </summary>
        class Slice1Impl : SliceListAccessorMultiple<Observation.ComponentComponent>, ISlice1                                               // CSSliceCreator.cs:287
        {                                                                                                                                   // CSSliceCreator.cs:288
                                                                                                                                            // CSSliceCreator.cs:319
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice1
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing;                                                                         // CSSliceCreator.cs:323
            /// <summary>
            /// Static constructor
            /// </summary>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1810:Initialize reference type static fields inline")]
            static Slice1Impl()                                                                                                             // CSSliceCreator.cs:301
            {                                                                                                                               // CSSliceCreator.cs:302
                                                                                                                                            // CSSliceCreator.cs:327
                // Instantiate slicing discriminator
                {                                                                                                                           // CSSliceCreator.cs:342
                    ISliceDiscriminator<Observation.ComponentComponent>[] discriminators =                                                  // CSSliceCreator.cs:343
                        new ISliceDiscriminator<Observation.ComponentComponent>[1];                                                         // CSSliceCreator.cs:344
                    /// Define discriminator'
                    /// {
                    ///   "type": "value",
                    ///   "path": "code"
                    /// }
                }                                                                                                                           // CSSliceCreator.cs:358
            }                                                                                                                               // CSSliceCreator.cs:304
                                                                                                                                            // CSSliceCreator.cs:224
            /// <summary>
            /// Slice1Impl constructor
            /// </summary>
            public Slice1Impl(List<Observation.ComponentComponent> items)                                                                   // CSSliceCreator.cs:228
            {                                                                                                                               // CSSliceCreator.cs:229
                this.Items = items;                                                                                                         // CSSliceCreator.cs:230
                this.Slicing = slicing;                                                                                                     // CSSliceCreator.cs:231
            }                                                                                                                               // CSSliceCreator.cs:232
                                                                                                                                            // CSSliceCreator.cs:410
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSSliceCreator.cs:414
            {                                                                                                                               // CSSliceCreator.cs:415
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSSliceCreator.cs:416
                return retVal;                                                                                                              // CSSliceCreator.cs:420
            }                                                                                                                               // CSSliceCreator.cs:421
        }                                                                                                                                   // CSSliceCreator.cs:293
                                                                                                                                            // CSSliceCreator.cs:274
        /// <summary>
        /// public interface that implements the functionality of slice Slice2Impl
        /// </summary>
        public interface ISlice2 : ISliceAccessorMultiple<Observation.ComponentComponent>                                                   // CSSliceCreator.cs:278
        {                                                                                                                                   // CSSliceCreator.cs:279
        }                                                                                                                                   // CSSliceCreator.cs:280
                                                                                                                                            // CSSliceCreator.cs:281
        /// <summary>
        /// private class that implements the functionality of slice Slice2Impl
        /// 
        /// {
        ///   "id": "Observation.component:Slice2",
        ///   "path": "Observation.component",
        ///   "sliceName": "Slice2",
        ///   "short": "Component results",
        ///   "definition": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
        ///   "comment": "For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.",
        ///   "requirements": "Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.",
        ///   "min": 0,
        ///   "max": "*",
        ///   "base": {
        ///     "path": "Observation.component",
        ///     "min": 0,
        ///     "max": "*"
        ///   },
        ///   "type": [
        ///     {
        ///       "code": "BackboneElement"
        ///     }
        ///   ],
        ///   "constraint": [
        ///     {
        ///       "key": "ele-1",
        ///       "severity": "error",
        ///       "human": "All FHIR elements must have a @value or children",
        ///       "expression": "hasValue() or (children().count() > id.count())",
        ///       "xpath": "@value|f:*|h:div",
        ///       "source": "Element"
        ///     }
        ///   ],
        ///   "isModifier": false,
        ///   "isSummary": true,
        ///   "mapping": [
        ///     {
        ///       "identity": "v2",
        ///       "map": "containment by OBX-4?"
        ///     },
        ///     {
        ///       "identity": "rim",
        ///       "map": "outBoundRelationship[typeCode=COMP]"
        ///     }
        ///   ]
        /// }
        /// </summary>
        class Slice2Impl : SliceListAccessorMultiple<Observation.ComponentComponent>, ISlice2                                               // CSSliceCreator.cs:287
        {                                                                                                                                   // CSSliceCreator.cs:288
                                                                                                                                            // CSSliceCreator.cs:319
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice2
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing;                                                                         // CSSliceCreator.cs:323
            /// <summary>
            /// Static constructor
            /// </summary>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1810:Initialize reference type static fields inline")]
            static Slice2Impl()                                                                                                             // CSSliceCreator.cs:301
            {                                                                                                                               // CSSliceCreator.cs:302
                                                                                                                                            // CSSliceCreator.cs:327
                // Instantiate slicing discriminator
                {                                                                                                                           // CSSliceCreator.cs:342
                    ISliceDiscriminator<Observation.ComponentComponent>[] discriminators =                                                  // CSSliceCreator.cs:343
                        new ISliceDiscriminator<Observation.ComponentComponent>[1];                                                         // CSSliceCreator.cs:344
                    /// Define discriminator'
                    /// {
                    ///   "type": "value",
                    ///   "path": "code"
                    /// }
                }                                                                                                                           // CSSliceCreator.cs:358
            }                                                                                                                               // CSSliceCreator.cs:304
                                                                                                                                            // CSSliceCreator.cs:224
            /// <summary>
            /// Slice2Impl constructor
            /// </summary>
            public Slice2Impl(List<Observation.ComponentComponent> items)                                                                   // CSSliceCreator.cs:228
            {                                                                                                                               // CSSliceCreator.cs:229
                this.Items = items;                                                                                                         // CSSliceCreator.cs:230
                this.Slicing = slicing;                                                                                                     // CSSliceCreator.cs:231
            }                                                                                                                               // CSSliceCreator.cs:232
                                                                                                                                            // CSSliceCreator.cs:410
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSSliceCreator.cs:414
            {                                                                                                                               // CSSliceCreator.cs:415
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSSliceCreator.cs:416
                return retVal;                                                                                                              // CSSliceCreator.cs:420
            }                                                                                                                               // CSSliceCreator.cs:421
        }                                                                                                                                   // CSSliceCreator.cs:293
        #endregion
        #region fields SlicedMultipleExtensions fields
        #endregion
        #region methods SlicedMultipleExtensions methods
                                                                                                                                            // CSSliceCreator.cs:177
        /// <summary>
        /// Extension method to return slice Slice1 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// SlicedMultipleExtensions.ISlice1 sliceAccessor = resource.Component.Slice1();
        /// </example>
        public static ISlice1 Slice1(this List<Observation.ComponentComponent> item)                                                        // CSSliceCreator.cs:185
        {                                                                                                                                   // CSSliceCreator.cs:186
            Slice1Impl retVal = new Slice1Impl(item);                                                                                       // CSSliceCreator.cs:187
            return retVal;                                                                                                                  // CSSliceCreator.cs:188
        }                                                                                                                                   // CSSliceCreator.cs:189
                                                                                                                                            // CSSliceCreator.cs:177
        /// <summary>
        /// Extension method to return slice Slice2 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// SlicedMultipleExtensions.ISlice2 sliceAccessor = resource.Component.Slice2();
        /// </example>
        public static ISlice2 Slice2(this List<Observation.ComponentComponent> item)                                                        // CSSliceCreator.cs:185
        {                                                                                                                                   // CSSliceCreator.cs:186
            Slice2Impl retVal = new Slice2Impl(item);                                                                                       // CSSliceCreator.cs:187
            return retVal;                                                                                                                  // CSSliceCreator.cs:188
        }                                                                                                                                   // CSSliceCreator.cs:189
        #endregion
    }                                                                                                                                       // CSCodeFormatter.cs:115
}                                                                                                                                           // CSCodeFormatter.cs:72
