/*                                                                                                                                          // CSCodeFormatter.cs:49
 * Code in this class was auto generated by SliceGen                                                                                        // CSCodeFormatter.cs:50
*/                                                                                                                                          // CSCodeFormatter.cs:51
using System;                                                                                                                               // CSCodeFormatter.cs:52
using System.Linq;                                                                                                                          // CSCodeFormatter.cs:53
using System.Collections.Generic;                                                                                                           // CSCodeFormatter.cs:54
using System.Reflection;                                                                                                                    // CSCodeFormatter.cs:55
using System.Text;                                                                                                                          // CSCodeFormatter.cs:56
using Hl7.Fhir.Model;                                                                                                                       // CSCodeFormatter.cs:57
using FhirKhit.SliceGen.SharedLib;                                                                                                          // CSCodeFormatter.cs:58
                                                                                                                                            // CSCodeFormatter.cs:59
namespace FhirKhit.Test.R4                                                                                                                  // CSCodeFormatter.cs:60
{                                                                                                                                           // CSCodeFormatter.cs:61
                                                                                                                                            // CSCodeFormatter.cs:89
    /// <summary>
    /// Extension class to add slicing helper methods to Observation
    /// </summary>
    public static class SlicedMultipleExtensions
    {                                                                                                                                       // CSCodeFormatter.cs:94
        #region SlicedMultipleExtensions sub classes
                                                                                                                                            // CSSliceCreator.cs:242
        /// <summary>
        /// public interface that implements the functionality of slice Slice1Impl
        /// </summary>
        public interface ISlice1 : ISliceAccessorMultiple<Observation.ComponentComponent>                                                   // CSSliceCreator.cs:246
        {                                                                                                                                   // CSSliceCreator.cs:247
        }                                                                                                                                   // CSSliceCreator.cs:248
                                                                                                                                            // CSSliceCreator.cs:249
        /// <summary>
        /// private class that implements the functionality of slice Slice1Impl
        /// 
        /// {
        ///   "id": "Observation.component:Slice1",
        ///   "path": "Observation.component",
        ///   "sliceName": "Slice1",
        ///   "short": "Component results",
        ///   "definition": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
        ///   "comment": "For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.",
        ///   "requirements": "Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.",
        ///   "min": 0,
        ///   "max": "*",
        ///   "base": {
        ///     "path": "Observation.component",
        ///     "min": 0,
        ///     "max": "*"
        ///   },
        ///   "type": [
        ///     {
        ///       "code": "BackboneElement"
        ///     }
        ///   ],
        ///   "constraint": [
        ///     {
        ///       "key": "ele-1",
        ///       "severity": "error",
        ///       "human": "All FHIR elements must have a @value or children",
        ///       "expression": "hasValue() or (children().count() > id.count())",
        ///       "xpath": "@value|f:*|h:div",
        ///       "source": "Element"
        ///     }
        ///   ],
        ///   "isModifier": false,
        ///   "isSummary": true,
        ///   "mapping": [
        ///     {
        ///       "identity": "v2",
        ///       "map": "containment by OBX-4?"
        ///     },
        ///     {
        ///       "identity": "rim",
        ///       "map": "outBoundRelationship[typeCode=COMP]"
        ///     }
        ///   ]
        /// }
        /// </summary>
        class Slice1Impl : SliceListAccessorMultiple<Observation.ComponentComponent>, ISlice1                                               // CSSliceCreator.cs:255
        {                                                                                                                                   // CSSliceCreator.cs:256
            #region SlicedMultipleExtensions.Slice1Impl fields
                                                                                                                                            // CSSliceCreator.cs:279
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice1
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing = new Slicing<Observation.ComponentComponent>                            // CSSliceCreator.cs:283
            {                                                                                                                               // CSSliceCreator.cs:284
                Discriminators = new ISliceDiscriminator<Observation.ComponentComponent>[]                                                  // CSSliceCreator.cs:285
                {                                                                                                                           // CSSliceCreator.cs:286
                    /// Define discriminator'
                    /// {
                    ///   "type": "value",
                    ///   "path": "code"
                    /// }
                    new SliceOnValueDiscriminator<Observation.ComponentComponent, CodeableConcept>                                          // CSSliceCreator.cs:76
                    {                                                                                                                       // CSSliceCreator.cs:77
                        Path = "code",                                                                                                      // CSSliceCreator.cs:78
                        Pattern = FixComponentSlice1Code(),                                                                                 // CSSliceCreator.cs:79
                        ValueFilter = ValueFilterComponentSlice1Code                                                                        // CSSliceCreator.cs:80
                    }                                                                                                                       // CSSliceCreator.cs:81
                }                                                                                                                           // CSSliceCreator.cs:298
            };                                                                                                                              // CSSliceCreator.cs:299
            #endregion  // SlicedMultipleExtensions.Slice1Impl  fields
            #region SlicedMultipleExtensions.Slice1Impl methods
                                                                                                                                            // CSSliceCreator.cs:63
            /// <summary>
            /// Return all elements for discriminator'                                                                                      // CSSliceCreator.cs:65
            /// {
            ///   "type": "value",
            ///   "path": "code"
            /// }
            /// </summary>
            static IEnumerable<CodeableConcept> ValueFilterComponentSlice1Code(IEnumerable<Observation.ComponentComponent> head)            // CSSliceCreator.cs:556
            {                                                                                                                               // CSSliceCreator.cs:489
                                                                                                                                            // CSSliceCreator.cs:490
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // CSSliceCreator.cs:440
                {                                                                                                                           // CSSliceCreator.cs:441
                    if (inputElements != null)                                                                                              // CSSliceCreator.cs:442
                    {                                                                                                                       // CSSliceCreator.cs:443
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // CSSliceCreator.cs:444
                        {                                                                                                                   // CSSliceCreator.cs:445
                            yield return inputElement.Code;                                                                                 // CSSliceCreator.cs:460
                        }                                                                                                                   // CSSliceCreator.cs:465
                    }                                                                                                                       // CSSliceCreator.cs:466
                }                                                                                                                           // CSSliceCreator.cs:467
                IEnumerable<CodeableConcept> result1 = GetChild_1(head);                                                                    // CSSliceCreator.cs:542
                return result1;                                                                                                             // CSSliceCreator.cs:549
            }                                                                                                                               // CSSliceCreator.cs:550
                                                                                                                                            // CSSliceCreator.cs:192
            /// <summary>
            /// Slice1Impl constructor
            /// </summary>
            public Slice1Impl(List<Observation.ComponentComponent> items)                                                                   // CSSliceCreator.cs:196
            {                                                                                                                               // CSSliceCreator.cs:197
                this.Items = items;                                                                                                         // CSSliceCreator.cs:198
                this.Slicing = slicing;                                                                                                     // CSSliceCreator.cs:199
            }                                                                                                                               // CSSliceCreator.cs:200
            static CodeableConcept FixComponentSlice1Code()                                                                                 // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice1Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal;                                                                                                              // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
                                                                                                                                            // CSSliceCreator.cs:353
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSSliceCreator.cs:357
            {                                                                                                                               // CSSliceCreator.cs:358
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSSliceCreator.cs:359
                CodeableConcept var3 = FixComponentSlice1Code();                                                                            // CSSliceCreator.cs:325
                retVal.Code = var3;                                                                                                         // CSSliceCreator.cs:329
                return retVal;                                                                                                              // CSSliceCreator.cs:363
            }                                                                                                                               // CSSliceCreator.cs:364
            #endregion // SlicedMultipleExtensions.Slice1Impl  methods
        }                                                                                                                                   // CSSliceCreator.cs:266
                                                                                                                                            // CSSliceCreator.cs:242
        /// <summary>
        /// public interface that implements the functionality of slice Slice2Impl
        /// </summary>
        public interface ISlice2 : ISliceAccessorMultiple<Observation.ComponentComponent>                                                   // CSSliceCreator.cs:246
        {                                                                                                                                   // CSSliceCreator.cs:247
        }                                                                                                                                   // CSSliceCreator.cs:248
                                                                                                                                            // CSSliceCreator.cs:249
        /// <summary>
        /// private class that implements the functionality of slice Slice2Impl
        /// 
        /// {
        ///   "id": "Observation.component:Slice2",
        ///   "path": "Observation.component",
        ///   "sliceName": "Slice2",
        ///   "short": "Component results",
        ///   "definition": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
        ///   "comment": "For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.",
        ///   "requirements": "Component observations share the same attributes in the Observation resource as the primary observation and are always treated a part of a single observation (they are not separable).   However, the reference range for the primary observation value is not inherited by the component values and is required when appropriate for each component observation.",
        ///   "min": 0,
        ///   "max": "*",
        ///   "base": {
        ///     "path": "Observation.component",
        ///     "min": 0,
        ///     "max": "*"
        ///   },
        ///   "type": [
        ///     {
        ///       "code": "BackboneElement"
        ///     }
        ///   ],
        ///   "constraint": [
        ///     {
        ///       "key": "ele-1",
        ///       "severity": "error",
        ///       "human": "All FHIR elements must have a @value or children",
        ///       "expression": "hasValue() or (children().count() > id.count())",
        ///       "xpath": "@value|f:*|h:div",
        ///       "source": "Element"
        ///     }
        ///   ],
        ///   "isModifier": false,
        ///   "isSummary": true,
        ///   "mapping": [
        ///     {
        ///       "identity": "v2",
        ///       "map": "containment by OBX-4?"
        ///     },
        ///     {
        ///       "identity": "rim",
        ///       "map": "outBoundRelationship[typeCode=COMP]"
        ///     }
        ///   ]
        /// }
        /// </summary>
        class Slice2Impl : SliceListAccessorMultiple<Observation.ComponentComponent>, ISlice2                                               // CSSliceCreator.cs:255
        {                                                                                                                                   // CSSliceCreator.cs:256
            #region SlicedMultipleExtensions.Slice2Impl fields
                                                                                                                                            // CSSliceCreator.cs:279
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice2
            /// </summary>
            static Slicing<Observation.ComponentComponent> slicing = new Slicing<Observation.ComponentComponent>                            // CSSliceCreator.cs:283
            {                                                                                                                               // CSSliceCreator.cs:284
                Discriminators = new ISliceDiscriminator<Observation.ComponentComponent>[]                                                  // CSSliceCreator.cs:285
                {                                                                                                                           // CSSliceCreator.cs:286
                    /// Define discriminator'
                    /// {
                    ///   "type": "value",
                    ///   "path": "code"
                    /// }
                    new SliceOnValueDiscriminator<Observation.ComponentComponent, CodeableConcept>                                          // CSSliceCreator.cs:76
                    {                                                                                                                       // CSSliceCreator.cs:77
                        Path = "code",                                                                                                      // CSSliceCreator.cs:78
                        Pattern = FixComponentSlice2Code(),                                                                                 // CSSliceCreator.cs:79
                        ValueFilter = ValueFilterComponentSlice2Code                                                                        // CSSliceCreator.cs:80
                    }                                                                                                                       // CSSliceCreator.cs:81
                }                                                                                                                           // CSSliceCreator.cs:298
            };                                                                                                                              // CSSliceCreator.cs:299
            #endregion  // SlicedMultipleExtensions.Slice2Impl  fields
            #region SlicedMultipleExtensions.Slice2Impl methods
                                                                                                                                            // CSSliceCreator.cs:63
            /// <summary>
            /// Return all elements for discriminator'                                                                                      // CSSliceCreator.cs:65
            /// {
            ///   "type": "value",
            ///   "path": "code"
            /// }
            /// </summary>
            static IEnumerable<CodeableConcept> ValueFilterComponentSlice2Code(IEnumerable<Observation.ComponentComponent> head)            // CSSliceCreator.cs:556
            {                                                                                                                               // CSSliceCreator.cs:489
                                                                                                                                            // CSSliceCreator.cs:490
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // CSSliceCreator.cs:440
                {                                                                                                                           // CSSliceCreator.cs:441
                    if (inputElements != null)                                                                                              // CSSliceCreator.cs:442
                    {                                                                                                                       // CSSliceCreator.cs:443
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // CSSliceCreator.cs:444
                        {                                                                                                                   // CSSliceCreator.cs:445
                            yield return inputElement.Code;                                                                                 // CSSliceCreator.cs:460
                        }                                                                                                                   // CSSliceCreator.cs:465
                    }                                                                                                                       // CSSliceCreator.cs:466
                }                                                                                                                           // CSSliceCreator.cs:467
                IEnumerable<CodeableConcept> result1 = GetChild_1(head);                                                                    // CSSliceCreator.cs:542
                return result1;                                                                                                             // CSSliceCreator.cs:549
            }                                                                                                                               // CSSliceCreator.cs:550
                                                                                                                                            // CSSliceCreator.cs:192
            /// <summary>
            /// Slice2Impl constructor
            /// </summary>
            public Slice2Impl(List<Observation.ComponentComponent> items)                                                                   // CSSliceCreator.cs:196
            {                                                                                                                               // CSSliceCreator.cs:197
                this.Items = items;                                                                                                         // CSSliceCreator.cs:198
                this.Slicing = slicing;                                                                                                     // CSSliceCreator.cs:199
            }                                                                                                                               // CSSliceCreator.cs:200
            static CodeableConcept FixComponentSlice2Code()                                                                                 // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice2Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal;                                                                                                              // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
                                                                                                                                            // CSSliceCreator.cs:353
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSSliceCreator.cs:357
            {                                                                                                                               // CSSliceCreator.cs:358
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSSliceCreator.cs:359
                CodeableConcept var3 = FixComponentSlice2Code();                                                                            // CSSliceCreator.cs:325
                retVal.Code = var3;                                                                                                         // CSSliceCreator.cs:329
                return retVal;                                                                                                              // CSSliceCreator.cs:363
            }                                                                                                                               // CSSliceCreator.cs:364
            #endregion // SlicedMultipleExtensions.Slice2Impl  methods
        }                                                                                                                                   // CSSliceCreator.cs:266
        #endregion
        #region fields SlicedMultipleExtensions fields
        #endregion
        #region methods SlicedMultipleExtensions methods
                                                                                                                                            // CSSliceCreator.cs:129
        /// <summary>
        /// Extension method to return slice Slice1 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// SlicedMultipleExtensions.ISlice1 sliceAccessor = resource.Component.Slice1();
        /// </example>
        public static ISlice1 Slice1(this List<Observation.ComponentComponent> item)                                                        // CSSliceCreator.cs:137
        {                                                                                                                                   // CSSliceCreator.cs:138
            Slice1Impl retVal = new Slice1Impl(item);                                                                                       // CSSliceCreator.cs:139
            return retVal;                                                                                                                  // CSSliceCreator.cs:140
        }                                                                                                                                   // CSSliceCreator.cs:141
                                                                                                                                            // CSSliceCreator.cs:129
        /// <summary>
        /// Extension method to return slice Slice2 on component
        /// </summary>
        /// <example>
        /// Observation resource = new Observation();
        /// SlicedMultipleExtensions.ISlice2 sliceAccessor = resource.Component.Slice2();
        /// </example>
        public static ISlice2 Slice2(this List<Observation.ComponentComponent> item)                                                        // CSSliceCreator.cs:137
        {                                                                                                                                   // CSSliceCreator.cs:138
            Slice2Impl retVal = new Slice2Impl(item);                                                                                       // CSSliceCreator.cs:139
            return retVal;                                                                                                                  // CSSliceCreator.cs:140
        }                                                                                                                                   // CSSliceCreator.cs:141
        #endregion
    }                                                                                                                                       // CSCodeFormatter.cs:115
}                                                                                                                                           // CSCodeFormatter.cs:72
