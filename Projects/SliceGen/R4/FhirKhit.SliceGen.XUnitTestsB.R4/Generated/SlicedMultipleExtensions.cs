/*                                                                                                                                          // CSCodeFormatter.cs:47
 * Code in this class was auto generated by SliceGen                                                                                        // CSCodeFormatter.cs:48
*/                                                                                                                                          // CSCodeFormatter.cs:49
using System;                                                                                                                               // CSCodeFormatter.cs:50
using System.Linq;                                                                                                                          // CSCodeFormatter.cs:51
using System.Collections.Generic;                                                                                                           // CSCodeFormatter.cs:52
using System.Reflection;                                                                                                                    // CSCodeFormatter.cs:53
using System.Text;                                                                                                                          // CSCodeFormatter.cs:54
using Hl7.Fhir.Model;                                                                                                                       // CSCodeFormatter.cs:55
using FhirKhit.SliceGen.ShareLib;                                                                                                           // CSCodeFormatter.cs:56
                                                                                                                                            // CSCodeFormatter.cs:57
namespace FhirKhit.Test.R4                                                                                                                  // CSCodeFormatter.cs:58
{                                                                                                                                           // CSCodeFormatter.cs:59
                                                                                                                                            // CSCodeFormatter.cs:86
    /// <summary>
    /// Extension class to add slicing helper methods to Observation
    /// </summary>
    public static class SlicedMultipleExtensions
    {                                                                                                                                       // CSCodeFormatter.cs:90
        #region SlicedMultipleExtensions sub classes
        public class Slice1Impl : SliceListAccessorMultiple<Observation.ComponentComponent>                                                 // CSCodeFormatter.cs:302
        {                                                                                                                                   // CSCodeFormatter.cs:303
            #region SlicedMultipleExtensions.Slice1Impl fields
                                                                                                                                            // CSCodeFormatter.cs:337
            /// <summary>
            /// Pointer to element containing all slice(s) elements
            /// </summary>
                                                                                                                                            // CSCodeFormatter.cs:340
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice1
            /// </summary>
            static Slicing slicing = new Slicing                                                                                            // CSCodeFormatter.cs:343
            {                                                                                                                               // CSCodeFormatter.cs:344
                Discriminators = new ISliceDiscriminator[]                                                                                  // CSCodeFormatter.cs:345
                {                                                                                                                           // CSCodeFormatter.cs:346
                    new SliceOnValueDiscriminator                                                                                           // CSCodeFormatter.cs:210
                    {                                                                                                                       // CSCodeFormatter.cs:211
                        Path = "code",                                                                                                      // CSCodeFormatter.cs:212
                        Pattern = Fix_1()                                                                                                   // CSCodeFormatter.cs:213
                    }                                                                                                                       // CSCodeFormatter.cs:214
                }                                                                                                                           // CSCodeFormatter.cs:358
            };                                                                                                                              // CSCodeFormatter.cs:359
            #endregion  // SlicedMultipleExtensions.Slice1Impl  fields
            #region SlicedMultipleExtensions.Slice1Impl methods
                                                                                                                                            // CSCodeFormatter.cs:318
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSCodeFormatter.cs:321
            {                                                                                                                               // CSCodeFormatter.cs:322
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSCodeFormatter.cs:323
                if (retVal.Code == null)                                                                                                    // GenerateSimpleFhirPathMethod.cs:223
                    retVal.Code = Fix_1();                                                                                                  // GenerateSimpleFhirPathMethod.cs:224
                return retVal;                                                                                                              // CSCodeFormatter.cs:366
            }                                                                                                                               // CSCodeFormatter.cs:367
                                                                                                                                            // CSCodeFormatter.cs:192
            /// <summary>
            /// Method to define fixed field used in slice accessor.
            /// </summary>
            static CodeableConcept Fix_1()                                                                                                  // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice1Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal;                                                                                                              // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
                                                                                                                                            // CSCodeFormatter.cs:199
            /// <summary>
            /// Return all elements at discriminator path 'code'
            /// </summary>
            private IEnumerable<Element> GetDiscriminatorElements(List<Observation.ComponentComponent> head)                                // GenerateSimpleFhirPathMethod.cs:99
            {                                                                                                                               // GenerateSimpleFhirPathMethod.cs:100
                                                                                                                                            // GenerateSimpleFhirPathMethod.cs:101
                IEnumerable<Observation.ComponentComponent> results0 = head;                                                                // GenerateSimpleFhirPathMethod.cs:109
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // GenerateSimpleFhirPathMethod.cs:54
                {                                                                                                                           // GenerateSimpleFhirPathMethod.cs:55
                    if (inputElements != null)                                                                                              // GenerateSimpleFhirPathMethod.cs:56
                    {                                                                                                                       // GenerateSimpleFhirPathMethod.cs:57
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // GenerateSimpleFhirPathMethod.cs:58
                        {                                                                                                                   // GenerateSimpleFhirPathMethod.cs:59
                            yield return inputElement.Code;                                                                                 // GenerateSimpleFhirPathMethod.cs:74
                        }                                                                                                                   // GenerateSimpleFhirPathMethod.cs:79
                    }                                                                                                                       // GenerateSimpleFhirPathMethod.cs:80
                }                                                                                                                           // GenerateSimpleFhirPathMethod.cs:81
                IEnumerable<CodeableConcept> results1 = GetChild_1(results0);                                                               // GenerateSimpleFhirPathMethod.cs:163
                return results1;                                                                                                            // GenerateSimpleFhirPathMethod.cs:168
            }                                                                                                                               // GenerateSimpleFhirPathMethod.cs:172
                                                                                                                                            // CSCodeFormatter.cs:260
            /// <summary>
            /// Slice1Impl constructor
            /// </summary>
            public Slice1Impl(List<Observation.ComponentComponent> items)                                                                   // CSCodeFormatter.cs:263
            {                                                                                                                               // CSCodeFormatter.cs:264
                this.items = items;                                                                                                         // CSCodeFormatter.cs:265
                this.Slicing = slicing;                                                                                                     // CSCodeFormatter.cs:266
            }                                                                                                                               // CSCodeFormatter.cs:267
            #endregion // SlicedMultipleExtensions.Slice1Impl  methods
        }                                                                                                                                   // CSCodeFormatter.cs:314
        public class Slice2Impl : SliceListAccessorMultiple<Observation.ComponentComponent>                                                 // CSCodeFormatter.cs:302
        {                                                                                                                                   // CSCodeFormatter.cs:303
            #region SlicedMultipleExtensions.Slice2Impl fields
                                                                                                                                            // CSCodeFormatter.cs:337
            /// <summary>
            /// Pointer to element containing all slice(s) elements
            /// </summary>
                                                                                                                                            // CSCodeFormatter.cs:340
            /// <summary>
            /// slicing discriminator for Observation.component slice Slice2
            /// </summary>
            static Slicing slicing = new Slicing                                                                                            // CSCodeFormatter.cs:343
            {                                                                                                                               // CSCodeFormatter.cs:344
                Discriminators = new ISliceDiscriminator[]                                                                                  // CSCodeFormatter.cs:345
                {                                                                                                                           // CSCodeFormatter.cs:346
                    new SliceOnValueDiscriminator                                                                                           // CSCodeFormatter.cs:210
                    {                                                                                                                       // CSCodeFormatter.cs:211
                        Path = "code",                                                                                                      // CSCodeFormatter.cs:212
                        Pattern = Fix_1()                                                                                                   // CSCodeFormatter.cs:213
                    }                                                                                                                       // CSCodeFormatter.cs:214
                }                                                                                                                           // CSCodeFormatter.cs:358
            };                                                                                                                              // CSCodeFormatter.cs:359
            #endregion  // SlicedMultipleExtensions.Slice2Impl  fields
            #region SlicedMultipleExtensions.Slice2Impl methods
                                                                                                                                            // CSCodeFormatter.cs:318
            /// <summary>
            /// Create and initialize a new item
            /// </summary>
            protected override Observation.ComponentComponent Create()                                                                      // CSCodeFormatter.cs:321
            {                                                                                                                               // CSCodeFormatter.cs:322
                Observation.ComponentComponent retVal = new Observation.ComponentComponent();                                               // CSCodeFormatter.cs:323
                if (retVal.Code == null)                                                                                                    // GenerateSimpleFhirPathMethod.cs:223
                    retVal.Code = Fix_1();                                                                                                  // GenerateSimpleFhirPathMethod.cs:224
                return retVal;                                                                                                              // CSCodeFormatter.cs:366
            }                                                                                                                               // CSCodeFormatter.cs:367
                                                                                                                                            // CSCodeFormatter.cs:192
            /// <summary>
            /// Method to define fixed field used in slice accessor.
            /// </summary>
            static CodeableConcept Fix_1()                                                                                                  // FhirConstruct.cs:771
            {                                                                                                                               // FhirConstruct.cs:772
                CodeableConcept retVal = new CodeableConcept();                                                                             // FhirConstruct.cs:773
                retVal.Coding = new List<Coding>();                                                                                         // FhirConstruct.cs:779
                {                                                                                                                           // FhirConstruct.cs:782
                    var temp2 = new Coding();                                                                                               // FhirConstruct.cs:783
                    temp2.SystemElement = new FhirUri();                                                                                    // FhirConstruct.cs:786
                    temp2.SystemElement.Value = "http://www.test.com/SliceSystem";                                                          // FhirConstruct.cs:788
                    temp2.CodeElement = new Code();                                                                                         // FhirConstruct.cs:802
                    temp2.CodeElement.Value = "Slice2Code";                                                                                 // FhirConstruct.cs:804
                    retVal.Coding.Add(temp2);                                                                                               // FhirConstruct.cs:831
                }                                                                                                                           // FhirConstruct.cs:832
                return retVal;                                                                                                              // FhirConstruct.cs:847
            }                                                                                                                               // FhirConstruct.cs:848
                                                                                                                                            // CSCodeFormatter.cs:199
            /// <summary>
            /// Return all elements at discriminator path 'code'
            /// </summary>
            private IEnumerable<Element> GetDiscriminatorElements(List<Observation.ComponentComponent> head)                                // GenerateSimpleFhirPathMethod.cs:99
            {                                                                                                                               // GenerateSimpleFhirPathMethod.cs:100
                                                                                                                                            // GenerateSimpleFhirPathMethod.cs:101
                IEnumerable<Observation.ComponentComponent> results0 = head;                                                                // GenerateSimpleFhirPathMethod.cs:109
                IEnumerable<CodeableConcept> GetChild_1(IEnumerable<Observation.ComponentComponent> inputElements)                          // GenerateSimpleFhirPathMethod.cs:54
                {                                                                                                                           // GenerateSimpleFhirPathMethod.cs:55
                    if (inputElements != null)                                                                                              // GenerateSimpleFhirPathMethod.cs:56
                    {                                                                                                                       // GenerateSimpleFhirPathMethod.cs:57
                        foreach (Observation.ComponentComponent inputElement in inputElements)                                              // GenerateSimpleFhirPathMethod.cs:58
                        {                                                                                                                   // GenerateSimpleFhirPathMethod.cs:59
                            yield return inputElement.Code;                                                                                 // GenerateSimpleFhirPathMethod.cs:74
                        }                                                                                                                   // GenerateSimpleFhirPathMethod.cs:79
                    }                                                                                                                       // GenerateSimpleFhirPathMethod.cs:80
                }                                                                                                                           // GenerateSimpleFhirPathMethod.cs:81
                IEnumerable<CodeableConcept> results1 = GetChild_1(results0);                                                               // GenerateSimpleFhirPathMethod.cs:163
                return results1;                                                                                                            // GenerateSimpleFhirPathMethod.cs:168
            }                                                                                                                               // GenerateSimpleFhirPathMethod.cs:172
                                                                                                                                            // CSCodeFormatter.cs:260
            /// <summary>
            /// Slice2Impl constructor
            /// </summary>
            public Slice2Impl(List<Observation.ComponentComponent> items)                                                                   // CSCodeFormatter.cs:263
            {                                                                                                                               // CSCodeFormatter.cs:264
                this.items = items;                                                                                                         // CSCodeFormatter.cs:265
                this.Slicing = slicing;                                                                                                     // CSCodeFormatter.cs:266
            }                                                                                                                               // CSCodeFormatter.cs:267
            #endregion // SlicedMultipleExtensions.Slice2Impl  methods
        }                                                                                                                                   // CSCodeFormatter.cs:314
        #endregion
        #region fields SlicedMultipleExtensions fields
        #endregion
        #region methods SlicedMultipleExtensions methods
                                                                                                                                            // CSCodeFormatter.cs:244
        /// <summary>
        /// Extension method to return slice Slice1 on component
        /// </summary>
        public static Slice1Impl Slice1(this List<Observation.ComponentComponent> item)                                                     // CSCodeFormatter.cs:247
        {                                                                                                                                   // CSCodeFormatter.cs:248
            Slice1Impl retVal = new Slice1Impl(item);                                                                                       // CSCodeFormatter.cs:249
            return retVal;                                                                                                                  // CSCodeFormatter.cs:250
        }                                                                                                                                   // CSCodeFormatter.cs:251
                                                                                                                                            // CSCodeFormatter.cs:244
        /// <summary>
        /// Extension method to return slice Slice2 on component
        /// </summary>
        public static Slice2Impl Slice2(this List<Observation.ComponentComponent> item)                                                     // CSCodeFormatter.cs:247
        {                                                                                                                                   // CSCodeFormatter.cs:248
            Slice2Impl retVal = new Slice2Impl(item);                                                                                       // CSCodeFormatter.cs:249
            return retVal;                                                                                                                  // CSCodeFormatter.cs:250
        }                                                                                                                                   // CSCodeFormatter.cs:251
        #endregion
    }                                                                                                                                       // CSCodeFormatter.cs:111
}                                                                                                                                           // CSCodeFormatter.cs:70
