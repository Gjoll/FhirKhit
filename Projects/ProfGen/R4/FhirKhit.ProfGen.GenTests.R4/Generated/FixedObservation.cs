/*                                                                              // CSCodeFormatter.cs:72
 * Code in this class was auto generated by ProfGen                             // CSCodeFormatter.cs:73
*/                                                                              // CSCodeFormatter.cs:74
using System;                                                                   // CSCodeFormatter.cs:75
using System.Linq;                                                              // CSCodeFormatter.cs:76
using System.Collections.Generic;                                               // CSCodeFormatter.cs:77
using System.Reflection;                                                        // CSCodeFormatter.cs:78
using System.Text;                                                              // CSCodeFormatter.cs:79
using FhirKhit.ProfGen.SharedLib;                                               // CSCodeFormatter.cs:80
using Hl7.Fhir.Model;                                                           // CSCodeFormatter.cs:81
                                                                                // CSCodeFormatter.cs:82
namespace FhirKhit.Test.R4                                                      // CSCodeFormatter.cs:83
{                                                                               // CSCodeFormatter.cs:84
                                                                                // CSClassFormatter.cs:84
    /// <summary>                                                               // CSClassFormatter.cs:85
    /// Class to implement 'FixedObservation'                                   // CSClassFormatter.cs:86
    /// </summary>                                                              // CSClassFormatter.cs:87
    public class FixedObservation :                                             // CSClassFormatter.cs:88
        ProfileBase<Observation>                                                // CSClassFormatter.cs:89
    {                                                                           // CSClassFormatter.cs:90
#region Sub Class Definitions
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property IdElement                                     // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__IdElement                                        // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__IdElement(Observation ptr)                         // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Id' value                                                  // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Id'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Id value)                                       // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.IdElement as Id;                               // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Id' Value                                                  // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Id value) => this.ptr.IdElement = value;            // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Meta                                          // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Meta                                             // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Meta(Observation ptr)                              // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Meta' value                                                // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Meta'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Meta value)                                     // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Meta as Meta;                                  // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Meta' Value                                                // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Meta value) => this.ptr.Meta = value;               // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property ImplicitRulesElement                          // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__ImplicitRulesElement                             // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__ImplicitRulesElement(Observation ptr)              // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'FhirUri' value                                             // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'FhirUri'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out FhirUri value)                                  // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.ImplicitRulesElement as FhirUri;               // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'FhirUri' Value                                             // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(FhirUri value) => this.ptr.ImplicitRulesElement = value;// CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property LanguageElement                               // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__LanguageElement                                  // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__LanguageElement(Observation ptr)                   // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Code' value                                                // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Code'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Code value)                                     // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.LanguageElement as Code;                       // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Code' Value                                                // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Code value) => this.ptr.LanguageElement = value;    // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Text                                          // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Text                                             // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Text(Observation ptr)                              // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Narrative' value                                           // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Narrative'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Narrative value)                                // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Text as Narrative;                             // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Narrative' Value                                           // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Narrative value) => this.ptr.Text = value;          // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Contained                                     // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Contained                                        // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Contained(Observation ptr)                         // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Contained.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<Resource> Get() => this.ptr.Contained;           // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property ModifierExtension                             // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__ModifierExtension                                // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__ModifierExtension(Observation ptr)                 // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.ModifierExtension.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<Extension> Get() => this.ptr.ModifierExtension;  // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:654
        /// <summary>                                                           // CSClassFormatter.cs:655
        /// Accessor for property Identifier                                    // CSClassFormatter.cs:656
        /// </summary>                                                          // CSClassFormatter.cs:657
        public class Accessor__Identifier                                       // CSClassFormatter.cs:658
        {                                                                       // CSClassFormatter.cs:659
            Observation ptr;                                                    // CSClassFormatter.cs:660
                                                                                // CSClassFormatter.cs:661
            public Accessor__Identifier(Observation ptr)                        // CSClassFormatter.cs:662
            {                                                                   // CSClassFormatter.cs:663
                this.ptr = ptr;                                                 // CSClassFormatter.cs:664
            }                                                                   // CSClassFormatter.cs:665
                                                                                // CSClassFormatter.cs:666
            /// <summary>                                                       // CSClassFormatter.cs:667
            /// Property for accessing fixed property Observation.identifier.   // CSClassFormatter.cs:668
            /// </summary>                                                      // CSClassFormatter.cs:669
            public bool Get(out Identifier value)                               // CSClassFormatter.cs:670
            {                                                                   // CSClassFormatter.cs:671
                value = this.ptr.Identifier.First();                            // CSClassFormatter.cs:676
                return value != null;                                           // CSClassFormatter.cs:680
            }                                                                   // CSClassFormatter.cs:681
        }                                                                       // CSClassFormatter.cs:682
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property BasedOn                                       // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__BasedOn                                          // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__BasedOn(Observation ptr)                           // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.BasedOn.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<ResourceReference> Get() => this.ptr.BasedOn;    // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property PartOf                                        // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__PartOf                                           // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__PartOf(Observation ptr)                            // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.PartOf.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<ResourceReference> Get() => this.ptr.PartOf;     // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:654
        /// <summary>                                                           // CSClassFormatter.cs:655
        /// Accessor for property Status                                        // CSClassFormatter.cs:656
        /// </summary>                                                          // CSClassFormatter.cs:657
        public class Accessor__Status                                           // CSClassFormatter.cs:658
        {                                                                       // CSClassFormatter.cs:659
            Observation ptr;                                                    // CSClassFormatter.cs:660
                                                                                // CSClassFormatter.cs:661
            public Accessor__Status(Observation ptr)                            // CSClassFormatter.cs:662
            {                                                                   // CSClassFormatter.cs:663
                this.ptr = ptr;                                                 // CSClassFormatter.cs:664
            }                                                                   // CSClassFormatter.cs:665
                                                                                // CSClassFormatter.cs:666
            /// <summary>                                                       // CSClassFormatter.cs:667
            /// Property for accessing fixed property Observation.status.       // CSClassFormatter.cs:668
            /// </summary>                                                      // CSClassFormatter.cs:669
            public bool Get(out Code<ObservationStatus> value)                  // CSClassFormatter.cs:670
            {                                                                   // CSClassFormatter.cs:671
                value = (Code<ObservationStatus>) this.ptr.StatusElement;       // CSClassFormatter.cs:675
                return value != null;                                           // CSClassFormatter.cs:680
            }                                                                   // CSClassFormatter.cs:681
        }                                                                       // CSClassFormatter.cs:682
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Category                                      // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Category                                         // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Category(Observation ptr)                          // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Category.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<CodeableConcept> Get() => this.ptr.Category;     // CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:1047
            /// <summary>                                                       // CSClassFormatter.cs:1048
            /// Count of items                                                  // CSClassFormatter.cs:1049
            /// </summary>                                                      // CSClassFormatter.cs:1050
            public Int32 Count => this.ptr.Category.Count;                      // CSClassFormatter.cs:1051
                                                                                // CSClassFormatter.cs:1053
            /// <summary>                                                       // CSClassFormatter.cs:1054
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:1055
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:1056
            /// </summary>                                                      // CSClassFormatter.cs:1057
            public bool Get(Int32 index, out CodeableConcept value)             // CSClassFormatter.cs:1058
            {                                                                   // CSClassFormatter.cs:1059
                value = this.ptr.Category[index] as CodeableConcept;            // CSClassFormatter.cs:1060
                return value != null;                                           // CSClassFormatter.cs:1061
            }                                                                   // CSClassFormatter.cs:1062
                                                                                // CSClassFormatter.cs:1064
            /// <summary>                                                       // CSClassFormatter.cs:1065
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:1066
            /// </summary>                                                      // CSClassFormatter.cs:1067
            public void Set(Int32 index, CodeableConcept value) => this.ptr.Category[index] = value;// CSClassFormatter.cs:1068
                                                                                // CSClassFormatter.cs:1070
            /// <summary>                                                       // CSClassFormatter.cs:1071
            /// Add 'CodeableConcept' Value                                     // CSClassFormatter.cs:1072
            /// </summary>                                                      // CSClassFormatter.cs:1073
            public void Add(CodeableConcept value) => this.ptr.Category.Add(value);// CSClassFormatter.cs:1074
                                                                                // CSClassFormatter.cs:1076
            /// <summary>                                                       // CSClassFormatter.cs:1077
            /// AddRange 'CodeableConcept' Value                                // CSClassFormatter.cs:1078
            /// </summary>                                                      // CSClassFormatter.cs:1079
            public void AddRange(IEnumerable<CodeableConcept> values) => this.ptr.Category.AddRange(values);// CSClassFormatter.cs:1080
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:654
        /// <summary>                                                           // CSClassFormatter.cs:655
        /// Accessor for property Code                                          // CSClassFormatter.cs:656
        /// </summary>                                                          // CSClassFormatter.cs:657
        public class Accessor__Code                                             // CSClassFormatter.cs:658
        {                                                                       // CSClassFormatter.cs:659
            Observation ptr;                                                    // CSClassFormatter.cs:660
                                                                                // CSClassFormatter.cs:661
            public Accessor__Code(Observation ptr)                              // CSClassFormatter.cs:662
            {                                                                   // CSClassFormatter.cs:663
                this.ptr = ptr;                                                 // CSClassFormatter.cs:664
            }                                                                   // CSClassFormatter.cs:665
                                                                                // CSClassFormatter.cs:666
            /// <summary>                                                       // CSClassFormatter.cs:667
            /// Property for accessing fixed property Observation.code.         // CSClassFormatter.cs:668
            /// </summary>                                                      // CSClassFormatter.cs:669
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:670
            {                                                                   // CSClassFormatter.cs:671
                value = (CodeableConcept) this.ptr.Code;                        // CSClassFormatter.cs:675
                return value != null;                                           // CSClassFormatter.cs:680
            }                                                                   // CSClassFormatter.cs:681
        }                                                                       // CSClassFormatter.cs:682
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Subject                                       // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Subject                                          // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Subject(Observation ptr)                           // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Focus                                         // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Focus                                            // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Focus(Observation ptr)                             // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Focus.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<ResourceReference> Get() => this.ptr.Focus;      // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Encounter                                     // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Encounter                                        // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Encounter(Observation ptr)                         // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Effective                                     // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Effective                                        // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Effective(Observation ptr)                         // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'FhirDateTime' value                                        // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'FhirDateTime'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out FhirDateTime value)                             // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Effective as FhirDateTime;                     // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'FhirDateTime' Value                                        // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(FhirDateTime value) => this.ptr.Effective = value;  // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Period' value                                              // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Period'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Period value)                                   // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Effective as Period;                           // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Period' Value                                              // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Period value) => this.ptr.Effective = value;        // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Timing' value                                              // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Timing'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Timing value)                                   // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Effective as Timing;                           // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Timing' Value                                              // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Timing value) => this.ptr.Effective = value;        // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Instant' value                                             // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Instant'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Instant value)                                  // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Effective as Instant;                          // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Instant' Value                                             // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Instant value) => this.ptr.Effective = value;       // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property IssuedElement                                 // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__IssuedElement                                    // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__IssuedElement(Observation ptr)                     // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Instant' value                                             // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Instant'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Instant value)                                  // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.IssuedElement as Instant;                      // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Instant' Value                                             // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Instant value) => this.ptr.IssuedElement = value;   // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Performer                                     // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Performer                                        // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Performer(Observation ptr)                         // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Performer.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<ResourceReference> Get() => this.ptr.Performer;  // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Value                                         // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Value                                            // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Value(Observation ptr)                             // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Quantity' value                                            // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Quantity'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Quantity value)                                 // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as Quantity;                             // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Quantity' Value                                            // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Quantity value) => this.ptr.Value = value;          // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as CodeableConcept;                      // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(CodeableConcept value) => this.ptr.Value = value;   // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'FhirString' value                                          // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'FhirString'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out FhirString value)                               // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as FhirString;                           // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'FhirString' Value                                          // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(FhirString value) => this.ptr.Value = value;        // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'FhirBoolean' value                                         // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'FhirBoolean'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out FhirBoolean value)                              // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as FhirBoolean;                          // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'FhirBoolean' Value                                         // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(FhirBoolean value) => this.ptr.Value = value;       // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Integer' value                                             // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Integer'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Integer value)                                  // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as Integer;                              // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Integer' Value                                             // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Integer value) => this.ptr.Value = value;           // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Range' value                                               // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Range'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Range value)                                    // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as Range;                                // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Range' Value                                               // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Range value) => this.ptr.Value = value;             // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Ratio' value                                               // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Ratio'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Ratio value)                                    // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as Ratio;                                // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Ratio' Value                                               // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Ratio value) => this.ptr.Value = value;             // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'SampledData' value                                         // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'SampledData'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out SampledData value)                              // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as SampledData;                          // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'SampledData' Value                                         // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(SampledData value) => this.ptr.Value = value;       // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Time' value                                                // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Time'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Time value)                                     // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as Time;                                 // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Time' Value                                                // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Time value) => this.ptr.Value = value;              // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'FhirDateTime' value                                        // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'FhirDateTime'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out FhirDateTime value)                             // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as FhirDateTime;                         // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'FhirDateTime' Value                                        // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(FhirDateTime value) => this.ptr.Value = value;      // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'Period' value                                              // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'Period'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out Period value)                                   // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Value as Period;                               // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'Period' Value                                              // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(Period value) => this.ptr.Value = value;            // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property DataAbsentReason                              // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__DataAbsentReason                                 // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__DataAbsentReason(Observation ptr)                  // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.DataAbsentReason as CodeableConcept;           // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(CodeableConcept value) => this.ptr.DataAbsentReason = value;// CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Interpretation                                // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Interpretation                                   // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Interpretation(Observation ptr)                    // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Interpretation.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<CodeableConcept> Get() => this.ptr.Interpretation;// CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:1047
            /// <summary>                                                       // CSClassFormatter.cs:1048
            /// Count of items                                                  // CSClassFormatter.cs:1049
            /// </summary>                                                      // CSClassFormatter.cs:1050
            public Int32 Count => this.ptr.Interpretation.Count;                // CSClassFormatter.cs:1051
                                                                                // CSClassFormatter.cs:1053
            /// <summary>                                                       // CSClassFormatter.cs:1054
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:1055
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:1056
            /// </summary>                                                      // CSClassFormatter.cs:1057
            public bool Get(Int32 index, out CodeableConcept value)             // CSClassFormatter.cs:1058
            {                                                                   // CSClassFormatter.cs:1059
                value = this.ptr.Interpretation[index] as CodeableConcept;      // CSClassFormatter.cs:1060
                return value != null;                                           // CSClassFormatter.cs:1061
            }                                                                   // CSClassFormatter.cs:1062
                                                                                // CSClassFormatter.cs:1064
            /// <summary>                                                       // CSClassFormatter.cs:1065
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:1066
            /// </summary>                                                      // CSClassFormatter.cs:1067
            public void Set(Int32 index, CodeableConcept value) => this.ptr.Interpretation[index] = value;// CSClassFormatter.cs:1068
                                                                                // CSClassFormatter.cs:1070
            /// <summary>                                                       // CSClassFormatter.cs:1071
            /// Add 'CodeableConcept' Value                                     // CSClassFormatter.cs:1072
            /// </summary>                                                      // CSClassFormatter.cs:1073
            public void Add(CodeableConcept value) => this.ptr.Interpretation.Add(value);// CSClassFormatter.cs:1074
                                                                                // CSClassFormatter.cs:1076
            /// <summary>                                                       // CSClassFormatter.cs:1077
            /// AddRange 'CodeableConcept' Value                                // CSClassFormatter.cs:1078
            /// </summary>                                                      // CSClassFormatter.cs:1079
            public void AddRange(IEnumerable<CodeableConcept> values) => this.ptr.Interpretation.AddRange(values);// CSClassFormatter.cs:1080
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Note                                          // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Note                                             // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Note(Observation ptr)                              // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Note.RemoveAt(index); // CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<Annotation> Get() => this.ptr.Note;              // CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:1047
            /// <summary>                                                       // CSClassFormatter.cs:1048
            /// Count of items                                                  // CSClassFormatter.cs:1049
            /// </summary>                                                      // CSClassFormatter.cs:1050
            public Int32 Count => this.ptr.Note.Count;                          // CSClassFormatter.cs:1051
                                                                                // CSClassFormatter.cs:1053
            /// <summary>                                                       // CSClassFormatter.cs:1054
            /// Get 'Annotation' value                                          // CSClassFormatter.cs:1055
            /// return true if successfull, false if value is null or con not be converted to 'Annotation'// CSClassFormatter.cs:1056
            /// </summary>                                                      // CSClassFormatter.cs:1057
            public bool Get(Int32 index, out Annotation value)                  // CSClassFormatter.cs:1058
            {                                                                   // CSClassFormatter.cs:1059
                value = this.ptr.Note[index] as Annotation;                     // CSClassFormatter.cs:1060
                return value != null;                                           // CSClassFormatter.cs:1061
            }                                                                   // CSClassFormatter.cs:1062
                                                                                // CSClassFormatter.cs:1064
            /// <summary>                                                       // CSClassFormatter.cs:1065
            /// Set 'Annotation' Value                                          // CSClassFormatter.cs:1066
            /// </summary>                                                      // CSClassFormatter.cs:1067
            public void Set(Int32 index, Annotation value) => this.ptr.Note[index] = value;// CSClassFormatter.cs:1068
                                                                                // CSClassFormatter.cs:1070
            /// <summary>                                                       // CSClassFormatter.cs:1071
            /// Add 'Annotation' Value                                          // CSClassFormatter.cs:1072
            /// </summary>                                                      // CSClassFormatter.cs:1073
            public void Add(Annotation value) => this.ptr.Note.Add(value);      // CSClassFormatter.cs:1074
                                                                                // CSClassFormatter.cs:1076
            /// <summary>                                                       // CSClassFormatter.cs:1077
            /// AddRange 'Annotation' Value                                     // CSClassFormatter.cs:1078
            /// </summary>                                                      // CSClassFormatter.cs:1079
            public void AddRange(IEnumerable<Annotation> values) => this.ptr.Note.AddRange(values);// CSClassFormatter.cs:1080
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property BodySite                                      // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__BodySite                                         // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__BodySite(Observation ptr)                          // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.BodySite as CodeableConcept;                   // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(CodeableConcept value) => this.ptr.BodySite = value;// CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Method                                        // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Method                                           // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Method(Observation ptr)                            // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
            /// <summary>                                                       // CSClassFormatter.cs:763
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:764
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
            /// </summary>                                                      // CSClassFormatter.cs:766
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:767
            {                                                                   // CSClassFormatter.cs:768
                value = this.ptr.Method as CodeableConcept;                     // CSClassFormatter.cs:769
                return value != null;                                           // CSClassFormatter.cs:770
            }                                                                   // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
            /// <summary>                                                       // CSClassFormatter.cs:773
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:774
            /// </summary>                                                      // CSClassFormatter.cs:775
            public void Set(CodeableConcept value) => this.ptr.Method = value;  // CSClassFormatter.cs:776
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Specimen                                      // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Specimen                                         // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Specimen(Observation ptr)                          // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
        /// <summary>                                                           // CSClassFormatter.cs:910
        /// Accessor for property Device                                        // CSClassFormatter.cs:911
        /// </summary>                                                          // CSClassFormatter.cs:912
        public class Accessor__Device                                           // CSClassFormatter.cs:913
        {                                                                       // CSClassFormatter.cs:914
            Observation ptr;                                                    // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
            public Accessor__Device(Observation ptr)                            // CSClassFormatter.cs:917
            {                                                                   // CSClassFormatter.cs:918
                this.ptr = ptr;                                                 // CSClassFormatter.cs:919
            }                                                                   // CSClassFormatter.cs:920
        }                                                                       // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property ReferenceRange                                // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__ReferenceRange                                   // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__ReferenceRange(Observation ptr)                    // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.ReferenceRange.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<Observation.ReferenceRangeComponent> Get() => this.ptr.ReferenceRange;// CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:997
            /// <summary>                                                       // CSClassFormatter.cs:998
            /// Count of items                                                  // CSClassFormatter.cs:999
            /// </summary>                                                      // CSClassFormatter.cs:1000
            public Int32 Count => this.ptr.ReferenceRange.Count;                // CSClassFormatter.cs:1001
                                                                                // CSClassFormatter.cs:1003
            /// <summary>                                                       // CSClassFormatter.cs:1004
            /// Get 'Observation.ReferenceRangeComponent' value                 // CSClassFormatter.cs:1005
            /// return true if successfull, false if value is null or con not be converted to 'Observation.ReferenceRangeComponent'// CSClassFormatter.cs:1006
            /// </summary>                                                      // CSClassFormatter.cs:1007
            public bool Get(Int32 index, out Accessor__ReferenceRangeComponent value)// CSClassFormatter.cs:1008
            {                                                                   // CSClassFormatter.cs:1009
                value = null;                                                   // CSClassFormatter.cs:1010
                Observation.ReferenceRangeComponent temp = this.ptr.ReferenceRange[index];// CSClassFormatter.cs:1011
                if (temp == null) return false;                                 // CSClassFormatter.cs:1012
                value = new Accessor__ReferenceRangeComponent(temp);            // CSClassFormatter.cs:1013
                return true;                                                    // CSClassFormatter.cs:1014
            }                                                                   // CSClassFormatter.cs:1015
                                                                                // CSClassFormatter.cs:1017
            /// <summary>                                                       // CSClassFormatter.cs:1018
            /// Set 'Observation.ReferenceRangeComponent' Value                 // CSClassFormatter.cs:1019
            /// </summary>                                                      // CSClassFormatter.cs:1020
            public void Set(Int32 index, Accessor__ReferenceRangeComponent value) => this.ptr.ReferenceRange[index] = value.Ptr;// CSClassFormatter.cs:1021
                                                                                // CSClassFormatter.cs:1023
            /// <summary>                                                       // CSClassFormatter.cs:1024
            /// Add 'Observation.ReferenceRangeComponent' Value                 // CSClassFormatter.cs:1025
            /// </summary>                                                      // CSClassFormatter.cs:1026
            public void Add(Accessor__ReferenceRangeComponent value) => this.ptr.ReferenceRange.Add(value.Ptr);// CSClassFormatter.cs:1027
                                                                                // CSClassFormatter.cs:1029
            /// <summary>                                                       // CSClassFormatter.cs:1030
            /// AddRange 'Observation.ReferenceRangeComponent' Value            // CSClassFormatter.cs:1031
            /// </summary>                                                      // CSClassFormatter.cs:1032
            public void AddRange(IEnumerable<Accessor__ReferenceRangeComponent> values)// CSClassFormatter.cs:1033
            {                                                                   // CSClassFormatter.cs:1034
                foreach (Accessor__ReferenceRangeComponent value in values)     // CSClassFormatter.cs:1035
                {                                                               // CSClassFormatter.cs:1036
                    this.Add(value);                                            // CSClassFormatter.cs:1037
                }                                                               // CSClassFormatter.cs:1038
            }                                                                   // CSClassFormatter.cs:1039
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property HasMember                                     // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__HasMember                                        // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__HasMember(Observation ptr)                         // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.HasMember.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<ResourceReference> Get() => this.ptr.HasMember;  // CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property DerivedFrom                                   // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__DerivedFrom                                      // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__DerivedFrom(Observation ptr)                       // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.DerivedFrom.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<ResourceReference> Get() => this.ptr.DerivedFrom;// CSClassFormatter.cs:1099
        }                                                                       // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
        /// <summary>                                                           // CSClassFormatter.cs:1217
        /// Accessor for property Component                                     // CSClassFormatter.cs:1218
        /// </summary>                                                          // CSClassFormatter.cs:1219
        public class Accessor__Component                                        // CSClassFormatter.cs:1220
        {                                                                       // CSClassFormatter.cs:1221
            Observation ptr;                                                    // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
            public Accessor__Component(Observation ptr)                         // CSClassFormatter.cs:1224
            {                                                                   // CSClassFormatter.cs:1225
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1226
            }                                                                   // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
            /// <summary>                                                       // CSClassFormatter.cs:1091
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1092
            /// </summary>                                                      // CSClassFormatter.cs:1093
            public void RemoveAt(Int32 index) => this.ptr.Component.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
            /// <summary>                                                       // CSClassFormatter.cs:1096
            /// Get list of all items                                           // CSClassFormatter.cs:1097
            /// </summary>                                                      // CSClassFormatter.cs:1098
            public IEnumerable<Observation.ComponentComponent> Get() => this.ptr.Component;// CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:997
            /// <summary>                                                       // CSClassFormatter.cs:998
            /// Count of items                                                  // CSClassFormatter.cs:999
            /// </summary>                                                      // CSClassFormatter.cs:1000
            public Int32 Count => this.ptr.Component.Count;                     // CSClassFormatter.cs:1001
                                                                                // CSClassFormatter.cs:1003
            /// <summary>                                                       // CSClassFormatter.cs:1004
            /// Get 'Observation.ComponentComponent' value                      // CSClassFormatter.cs:1005
            /// return true if successfull, false if value is null or con not be converted to 'Observation.ComponentComponent'// CSClassFormatter.cs:1006
            /// </summary>                                                      // CSClassFormatter.cs:1007
            public bool Get(Int32 index, out Accessor__ComponentComponent value)// CSClassFormatter.cs:1008
            {                                                                   // CSClassFormatter.cs:1009
                value = null;                                                   // CSClassFormatter.cs:1010
                Observation.ComponentComponent temp = this.ptr.Component[index];// CSClassFormatter.cs:1011
                if (temp == null) return false;                                 // CSClassFormatter.cs:1012
                value = new Accessor__ComponentComponent(temp);                 // CSClassFormatter.cs:1013
                return true;                                                    // CSClassFormatter.cs:1014
            }                                                                   // CSClassFormatter.cs:1015
                                                                                // CSClassFormatter.cs:1017
            /// <summary>                                                       // CSClassFormatter.cs:1018
            /// Set 'Observation.ComponentComponent' Value                      // CSClassFormatter.cs:1019
            /// </summary>                                                      // CSClassFormatter.cs:1020
            public void Set(Int32 index, Accessor__ComponentComponent value) => this.ptr.Component[index] = value.Ptr;// CSClassFormatter.cs:1021
                                                                                // CSClassFormatter.cs:1023
            /// <summary>                                                       // CSClassFormatter.cs:1024
            /// Add 'Observation.ComponentComponent' Value                      // CSClassFormatter.cs:1025
            /// </summary>                                                      // CSClassFormatter.cs:1026
            public void Add(Accessor__ComponentComponent value) => this.ptr.Component.Add(value.Ptr);// CSClassFormatter.cs:1027
                                                                                // CSClassFormatter.cs:1029
            /// <summary>                                                       // CSClassFormatter.cs:1030
            /// AddRange 'Observation.ComponentComponent' Value                 // CSClassFormatter.cs:1031
            /// </summary>                                                      // CSClassFormatter.cs:1032
            public void AddRange(IEnumerable<Accessor__ComponentComponent> values)// CSClassFormatter.cs:1033
            {                                                                   // CSClassFormatter.cs:1034
                foreach (Accessor__ComponentComponent value in values)          // CSClassFormatter.cs:1035
                {                                                               // CSClassFormatter.cs:1036
                    this.Add(value);                                            // CSClassFormatter.cs:1037
                }                                                               // CSClassFormatter.cs:1038
            }                                                                   // CSClassFormatter.cs:1039
        }                                                                       // CSClassFormatter.cs:1236
#endregion
#region Field Definitions
#endregion
#region Property Definitions
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.id.                              // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__IdElement Id => new Accessor__IdElement(this.ptr);     // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.meta.                            // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Meta Meta => new Accessor__Meta(this.ptr);             // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.implicitRules.                   // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__ImplicitRulesElement ImplicitRules => new Accessor__ImplicitRulesElement(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.language.                        // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__LanguageElement Language => new Accessor__LanguageElement(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.text.                            // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Text Text => new Accessor__Text(this.ptr);             // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.contained.                       // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Contained Contained => new Accessor__Contained(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.modifierExtension.               // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__ModifierExtension ModifierExtension => new Accessor__ModifierExtension(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.identifier.                      // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Identifier Identifier => new Accessor__Identifier(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.basedOn.                         // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__BasedOn BasedOn => new Accessor__BasedOn(this.ptr);    // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.partOf.                          // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__PartOf PartOf => new Accessor__PartOf(this.ptr);       // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.status.                          // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Status Status => new Accessor__Status(this.ptr);       // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.category.                        // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Category Category => new Accessor__Category(this.ptr); // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.code.                            // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Code Code => new Accessor__Code(this.ptr);             // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.subject.                         // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Subject Subject => new Accessor__Subject(this.ptr);    // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.focus.                           // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Focus Focus => new Accessor__Focus(this.ptr);          // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.encounter.                       // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Encounter Encounter => new Accessor__Encounter(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.effective[x].                    // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Effective Effective => new Accessor__Effective(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.issued.                          // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__IssuedElement Issued => new Accessor__IssuedElement(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.performer.                       // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Performer Performer => new Accessor__Performer(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.value[x].                        // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Value Value => new Accessor__Value(this.ptr);          // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.dataAbsentReason.                // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__DataAbsentReason DataAbsentReason => new Accessor__DataAbsentReason(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.interpretation.                  // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Interpretation Interpretation => new Accessor__Interpretation(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.note.                            // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Note Note => new Accessor__Note(this.ptr);             // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.bodySite.                        // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__BodySite BodySite => new Accessor__BodySite(this.ptr); // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.method.                          // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Method Method => new Accessor__Method(this.ptr);       // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.specimen.                        // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Specimen Specimen => new Accessor__Specimen(this.ptr); // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.device.                          // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Device Device => new Accessor__Device(this.ptr);       // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.referenceRange.                  // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__ReferenceRange ReferenceRange => new Accessor__ReferenceRange(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.hasMember.                       // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__HasMember HasMember => new Accessor__HasMember(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.derivedFrom.                     // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__DerivedFrom DerivedFrom => new Accessor__DerivedFrom(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
        /// <summary>                                                           // CSClassFormatter.cs:697
        /// Property for accessing Observation.component.                       // CSClassFormatter.cs:698
        /// An accessor instance is created each time this property is called.  // CSClassFormatter.cs:699
        /// </summary>                                                          // CSClassFormatter.cs:700
        public Accessor__Component Component => new Accessor__Component(this.ptr);// CSClassFormatter.cs:701
#endregion
                                                                                // CSClassFormatter.cs:105
        /// <summary>                                                           // CSClassFormatter.cs:106
        /// Constructor                                                         // CSClassFormatter.cs:107
        /// </summary>                                                          // CSClassFormatter.cs:108
        public FixedObservation(Observation ptr) : base(ptr)                    // CSClassFormatter.cs:109
        {                                                                       // CSClassFormatter.cs:110
            this.ptr.Identifier.Clear();                                        // CSClassFormatter.cs:646
            {                                                                   // CSClassFormatter.cs:479
                var temp = new Identifier("fixedIdentifierSystem", "fixedIdentifierValue");// CSClassFormatter.cs:480
                this.ptr.Identifier.Clear();                                    // CSClassFormatter.cs:487
                this.ptr.Identifier.Add(temp);                                  // CSClassFormatter.cs:488
            }                                                                   // CSClassFormatter.cs:489
            this.ptr.StatusElement = new Code<ObservationStatus>(ObservationStatus.Cancelled);// CSClassFormatter.cs:330
            {                                                                   // CSClassFormatter.cs:514
                CodeableConcept temp = new CodeableConcept();                   // CSClassFormatter.cs:515
                temp.Text = "codeText";                                         // CSClassFormatter.cs:518
                temp.Coding.Add(new Coding("codeSystem", "codeCode", "codeDisplay"));// CSClassFormatter.cs:520
                this.ptr.Code = temp;                                           // CSClassFormatter.cs:523
            }                                                                   // CSClassFormatter.cs:529
        }                                                                       // CSClassFormatter.cs:121
                                                                                // CSClassFormatter.cs:84
        /// <summary>                                                           // CSClassFormatter.cs:85
        /// Class to implement 'Accessor__ReferenceRangeComponent'              // CSClassFormatter.cs:86
        /// </summary>                                                          // CSClassFormatter.cs:87
        public class Accessor__ReferenceRangeComponent :                        // CSClassFormatter.cs:88
            ProfileBase<Observation.ReferenceRangeComponent>                    // CSClassFormatter.cs:89
        {                                                                       // CSClassFormatter.cs:90
#region Sub Class Definitions
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property ElementId                                 // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__ElementId                                    // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__ElementId(Observation.ReferenceRangeComponent ptr)// CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'String' value                                          // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'String'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out String value)                               // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.ElementId as String;                       // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'String' Value                                          // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(String value) => this.ptr.ElementId = value;    // CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property Extension                                 // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__Extension                                    // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__Extension(Observation.ReferenceRangeComponent ptr)// CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
                /// <summary>                                                   // CSClassFormatter.cs:1091
                /// Remove item at indicated index                              // CSClassFormatter.cs:1092
                /// </summary>                                                  // CSClassFormatter.cs:1093
                public void RemoveAt(Int32 index) => this.ptr.Extension.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
                /// <summary>                                                   // CSClassFormatter.cs:1096
                /// Get list of all items                                       // CSClassFormatter.cs:1097
                /// </summary>                                                  // CSClassFormatter.cs:1098
                public IEnumerable<Extension> Get() => this.ptr.Extension;      // CSClassFormatter.cs:1099
            }                                                                   // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property ModifierExtension                         // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__ModifierExtension                            // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__ModifierExtension(Observation.ReferenceRangeComponent ptr)// CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
                /// <summary>                                                   // CSClassFormatter.cs:1091
                /// Remove item at indicated index                              // CSClassFormatter.cs:1092
                /// </summary>                                                  // CSClassFormatter.cs:1093
                public void RemoveAt(Int32 index) => this.ptr.ModifierExtension.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
                /// <summary>                                                   // CSClassFormatter.cs:1096
                /// Get list of all items                                       // CSClassFormatter.cs:1097
                /// </summary>                                                  // CSClassFormatter.cs:1098
                public IEnumerable<Extension> Get() => this.ptr.ModifierExtension;// CSClassFormatter.cs:1099
            }                                                                   // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property Low                                       // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__Low                                          // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__Low(Observation.ReferenceRangeComponent ptr)   // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'SimpleQuantity' value                                  // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'SimpleQuantity'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out SimpleQuantity value)                       // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Low as SimpleQuantity;                     // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'SimpleQuantity' Value                                  // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(SimpleQuantity value) => this.ptr.Low = value;  // CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property High                                      // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__High                                         // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__High(Observation.ReferenceRangeComponent ptr)  // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'SimpleQuantity' value                                  // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'SimpleQuantity'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out SimpleQuantity value)                       // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.High as SimpleQuantity;                    // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'SimpleQuantity' Value                                  // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(SimpleQuantity value) => this.ptr.High = value; // CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property Type                                      // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__Type                                         // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__Type(Observation.ReferenceRangeComponent ptr)  // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'CodeableConcept' value                                 // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out CodeableConcept value)                      // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Type as CodeableConcept;                   // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'CodeableConcept' Value                                 // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(CodeableConcept value) => this.ptr.Type = value;// CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property AppliesTo                                 // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__AppliesTo                                    // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__AppliesTo(Observation.ReferenceRangeComponent ptr)// CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
                /// <summary>                                                   // CSClassFormatter.cs:1091
                /// Remove item at indicated index                              // CSClassFormatter.cs:1092
                /// </summary>                                                  // CSClassFormatter.cs:1093
                public void RemoveAt(Int32 index) => this.ptr.AppliesTo.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
                /// <summary>                                                   // CSClassFormatter.cs:1096
                /// Get list of all items                                       // CSClassFormatter.cs:1097
                /// </summary>                                                  // CSClassFormatter.cs:1098
                public IEnumerable<CodeableConcept> Get() => this.ptr.AppliesTo;// CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:1047
                /// <summary>                                                   // CSClassFormatter.cs:1048
                /// Count of items                                              // CSClassFormatter.cs:1049
                /// </summary>                                                  // CSClassFormatter.cs:1050
                public Int32 Count => this.ptr.AppliesTo.Count;                 // CSClassFormatter.cs:1051
                                                                                // CSClassFormatter.cs:1053
                /// <summary>                                                   // CSClassFormatter.cs:1054
                /// Get 'CodeableConcept' value                                 // CSClassFormatter.cs:1055
                /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:1056
                /// </summary>                                                  // CSClassFormatter.cs:1057
                public bool Get(Int32 index, out CodeableConcept value)         // CSClassFormatter.cs:1058
                {                                                               // CSClassFormatter.cs:1059
                    value = this.ptr.AppliesTo[index] as CodeableConcept;       // CSClassFormatter.cs:1060
                    return value != null;                                       // CSClassFormatter.cs:1061
                }                                                               // CSClassFormatter.cs:1062
                                                                                // CSClassFormatter.cs:1064
                /// <summary>                                                   // CSClassFormatter.cs:1065
                /// Set 'CodeableConcept' Value                                 // CSClassFormatter.cs:1066
                /// </summary>                                                  // CSClassFormatter.cs:1067
                public void Set(Int32 index, CodeableConcept value) => this.ptr.AppliesTo[index] = value;// CSClassFormatter.cs:1068
                                                                                // CSClassFormatter.cs:1070
                /// <summary>                                                   // CSClassFormatter.cs:1071
                /// Add 'CodeableConcept' Value                                 // CSClassFormatter.cs:1072
                /// </summary>                                                  // CSClassFormatter.cs:1073
                public void Add(CodeableConcept value) => this.ptr.AppliesTo.Add(value);// CSClassFormatter.cs:1074
                                                                                // CSClassFormatter.cs:1076
                /// <summary>                                                   // CSClassFormatter.cs:1077
                /// AddRange 'CodeableConcept' Value                            // CSClassFormatter.cs:1078
                /// </summary>                                                  // CSClassFormatter.cs:1079
                public void AddRange(IEnumerable<CodeableConcept> values) => this.ptr.AppliesTo.AddRange(values);// CSClassFormatter.cs:1080
            }                                                                   // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property Age                                       // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__Age                                          // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__Age(Observation.ReferenceRangeComponent ptr)   // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Range' value                                           // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Range'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Range value)                                // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Age as Range;                              // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Range' Value                                           // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Range value) => this.ptr.Age = value;           // CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property TextElement                               // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__TextElement                                  // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ReferenceRangeComponent ptr;                        // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__TextElement(Observation.ReferenceRangeComponent ptr)// CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'FhirString' value                                      // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'FhirString'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out FhirString value)                           // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.TextElement as FhirString;                 // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'FhirString' Value                                      // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(FhirString value) => this.ptr.TextElement = value;// CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
#endregion
#region Field Definitions
#endregion
#region Property Definitions
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.id.           // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__ElementId Id => new Accessor__ElementId(this.ptr); // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.extension.    // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Extension Extension => new Accessor__Extension(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.modifierExtension.// CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__ModifierExtension ModifierExtension => new Accessor__ModifierExtension(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.low.          // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Low Low => new Accessor__Low(this.ptr);            // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.high.         // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__High High => new Accessor__High(this.ptr);         // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.type.         // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Type Type => new Accessor__Type(this.ptr);         // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.appliesTo.    // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__AppliesTo AppliesTo => new Accessor__AppliesTo(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.age.          // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Age Age => new Accessor__Age(this.ptr);            // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.referenceRange.text.         // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__TextElement Text => new Accessor__TextElement(this.ptr);// CSClassFormatter.cs:701
#endregion
                                                                                // CSClassFormatter.cs:105
            /// <summary>                                                       // CSClassFormatter.cs:106
            /// Constructor                                                     // CSClassFormatter.cs:107
            /// </summary>                                                      // CSClassFormatter.cs:108
            public Accessor__ReferenceRangeComponent(Observation.ReferenceRangeComponent ptr) : base(ptr)// CSClassFormatter.cs:109
            {                                                                   // CSClassFormatter.cs:110
            }                                                                   // CSClassFormatter.cs:121
        }                                                                       // CSClassFormatter.cs:125
                                                                                // CSClassFormatter.cs:84
        /// <summary>                                                           // CSClassFormatter.cs:85
        /// Class to implement 'Accessor__ComponentComponent'                   // CSClassFormatter.cs:86
        /// </summary>                                                          // CSClassFormatter.cs:87
        public class Accessor__ComponentComponent :                             // CSClassFormatter.cs:88
            ProfileBase<Observation.ComponentComponent>                         // CSClassFormatter.cs:89
        {                                                                       // CSClassFormatter.cs:90
#region Sub Class Definitions
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property ElementId                                 // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__ElementId                                    // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__ElementId(Observation.ComponentComponent ptr)  // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'String' value                                          // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'String'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out String value)                               // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.ElementId as String;                       // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'String' Value                                          // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(String value) => this.ptr.ElementId = value;    // CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property Extension                                 // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__Extension                                    // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__Extension(Observation.ComponentComponent ptr)  // CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
                /// <summary>                                                   // CSClassFormatter.cs:1091
                /// Remove item at indicated index                              // CSClassFormatter.cs:1092
                /// </summary>                                                  // CSClassFormatter.cs:1093
                public void RemoveAt(Int32 index) => this.ptr.Extension.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
                /// <summary>                                                   // CSClassFormatter.cs:1096
                /// Get list of all items                                       // CSClassFormatter.cs:1097
                /// </summary>                                                  // CSClassFormatter.cs:1098
                public IEnumerable<Extension> Get() => this.ptr.Extension;      // CSClassFormatter.cs:1099
            }                                                                   // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property ModifierExtension                         // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__ModifierExtension                            // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__ModifierExtension(Observation.ComponentComponent ptr)// CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
                /// <summary>                                                   // CSClassFormatter.cs:1091
                /// Remove item at indicated index                              // CSClassFormatter.cs:1092
                /// </summary>                                                  // CSClassFormatter.cs:1093
                public void RemoveAt(Int32 index) => this.ptr.ModifierExtension.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
                /// <summary>                                                   // CSClassFormatter.cs:1096
                /// Get list of all items                                       // CSClassFormatter.cs:1097
                /// </summary>                                                  // CSClassFormatter.cs:1098
                public IEnumerable<Extension> Get() => this.ptr.ModifierExtension;// CSClassFormatter.cs:1099
            }                                                                   // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property Code                                      // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__Code                                         // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__Code(Observation.ComponentComponent ptr)       // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'CodeableConcept' value                                 // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out CodeableConcept value)                      // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Code as CodeableConcept;                   // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'CodeableConcept' Value                                 // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(CodeableConcept value) => this.ptr.Code = value;// CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property Value                                     // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__Value                                        // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__Value(Observation.ComponentComponent ptr)      // CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Quantity' value                                        // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Quantity'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Quantity value)                             // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as Quantity;                         // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Quantity' Value                                        // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Quantity value) => this.ptr.Value = value;      // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'CodeableConcept' value                                 // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out CodeableConcept value)                      // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as CodeableConcept;                  // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'CodeableConcept' Value                                 // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(CodeableConcept value) => this.ptr.Value = value;// CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'FhirString' value                                      // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'FhirString'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out FhirString value)                           // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as FhirString;                       // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'FhirString' Value                                      // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(FhirString value) => this.ptr.Value = value;    // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'FhirBoolean' value                                     // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'FhirBoolean'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out FhirBoolean value)                          // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as FhirBoolean;                      // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'FhirBoolean' Value                                     // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(FhirBoolean value) => this.ptr.Value = value;   // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Integer' value                                         // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Integer'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Integer value)                              // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as Integer;                          // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Integer' Value                                         // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Integer value) => this.ptr.Value = value;       // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Range' value                                           // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Range'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Range value)                                // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as Range;                            // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Range' Value                                           // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Range value) => this.ptr.Value = value;         // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Ratio' value                                           // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Ratio'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Ratio value)                                // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as Ratio;                            // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Ratio' Value                                           // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Ratio value) => this.ptr.Value = value;         // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'SampledData' value                                     // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'SampledData'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out SampledData value)                          // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as SampledData;                      // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'SampledData' Value                                     // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(SampledData value) => this.ptr.Value = value;   // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Time' value                                            // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Time'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Time value)                                 // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as Time;                             // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Time' Value                                            // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Time value) => this.ptr.Value = value;          // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'FhirDateTime' value                                    // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'FhirDateTime'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out FhirDateTime value)                         // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as FhirDateTime;                     // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'FhirDateTime' Value                                    // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(FhirDateTime value) => this.ptr.Value = value;  // CSClassFormatter.cs:776
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'Period' value                                          // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'Period'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out Period value)                               // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.Value as Period;                           // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'Period' Value                                          // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(Period value) => this.ptr.Value = value;        // CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:909
            /// <summary>                                                       // CSClassFormatter.cs:910
            /// Accessor for property DataAbsentReason                          // CSClassFormatter.cs:911
            /// </summary>                                                      // CSClassFormatter.cs:912
            public class Accessor__DataAbsentReason                             // CSClassFormatter.cs:913
            {                                                                   // CSClassFormatter.cs:914
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:915
                                                                                // CSClassFormatter.cs:916
                public Accessor__DataAbsentReason(Observation.ComponentComponent ptr)// CSClassFormatter.cs:917
                {                                                               // CSClassFormatter.cs:918
                    this.ptr = ptr;                                             // CSClassFormatter.cs:919
                }                                                               // CSClassFormatter.cs:920
                                                                                // CSClassFormatter.cs:762
                /// <summary>                                                   // CSClassFormatter.cs:763
                /// Get 'CodeableConcept' value                                 // CSClassFormatter.cs:764
                /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:765
                /// </summary>                                                  // CSClassFormatter.cs:766
                public bool Get(out CodeableConcept value)                      // CSClassFormatter.cs:767
                {                                                               // CSClassFormatter.cs:768
                    value = this.ptr.DataAbsentReason as CodeableConcept;       // CSClassFormatter.cs:769
                    return value != null;                                       // CSClassFormatter.cs:770
                }                                                               // CSClassFormatter.cs:771
                                                                                // CSClassFormatter.cs:772
                /// <summary>                                                   // CSClassFormatter.cs:773
                /// Set 'CodeableConcept' Value                                 // CSClassFormatter.cs:774
                /// </summary>                                                  // CSClassFormatter.cs:775
                public void Set(CodeableConcept value) => this.ptr.DataAbsentReason = value;// CSClassFormatter.cs:776
            }                                                                   // CSClassFormatter.cs:929
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property Interpretation                            // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__Interpretation                               // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__Interpretation(Observation.ComponentComponent ptr)// CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1090
                /// <summary>                                                   // CSClassFormatter.cs:1091
                /// Remove item at indicated index                              // CSClassFormatter.cs:1092
                /// </summary>                                                  // CSClassFormatter.cs:1093
                public void RemoveAt(Int32 index) => this.ptr.Interpretation.RemoveAt(index);// CSClassFormatter.cs:1094
                                                                                // CSClassFormatter.cs:1095
                /// <summary>                                                   // CSClassFormatter.cs:1096
                /// Get list of all items                                       // CSClassFormatter.cs:1097
                /// </summary>                                                  // CSClassFormatter.cs:1098
                public IEnumerable<CodeableConcept> Get() => this.ptr.Interpretation;// CSClassFormatter.cs:1099
                                                                                // CSClassFormatter.cs:1047
                /// <summary>                                                   // CSClassFormatter.cs:1048
                /// Count of items                                              // CSClassFormatter.cs:1049
                /// </summary>                                                  // CSClassFormatter.cs:1050
                public Int32 Count => this.ptr.Interpretation.Count;            // CSClassFormatter.cs:1051
                                                                                // CSClassFormatter.cs:1053
                /// <summary>                                                   // CSClassFormatter.cs:1054
                /// Get 'CodeableConcept' value                                 // CSClassFormatter.cs:1055
                /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:1056
                /// </summary>                                                  // CSClassFormatter.cs:1057
                public bool Get(Int32 index, out CodeableConcept value)         // CSClassFormatter.cs:1058
                {                                                               // CSClassFormatter.cs:1059
                    value = this.ptr.Interpretation[index] as CodeableConcept;  // CSClassFormatter.cs:1060
                    return value != null;                                       // CSClassFormatter.cs:1061
                }                                                               // CSClassFormatter.cs:1062
                                                                                // CSClassFormatter.cs:1064
                /// <summary>                                                   // CSClassFormatter.cs:1065
                /// Set 'CodeableConcept' Value                                 // CSClassFormatter.cs:1066
                /// </summary>                                                  // CSClassFormatter.cs:1067
                public void Set(Int32 index, CodeableConcept value) => this.ptr.Interpretation[index] = value;// CSClassFormatter.cs:1068
                                                                                // CSClassFormatter.cs:1070
                /// <summary>                                                   // CSClassFormatter.cs:1071
                /// Add 'CodeableConcept' Value                                 // CSClassFormatter.cs:1072
                /// </summary>                                                  // CSClassFormatter.cs:1073
                public void Add(CodeableConcept value) => this.ptr.Interpretation.Add(value);// CSClassFormatter.cs:1074
                                                                                // CSClassFormatter.cs:1076
                /// <summary>                                                   // CSClassFormatter.cs:1077
                /// AddRange 'CodeableConcept' Value                            // CSClassFormatter.cs:1078
                /// </summary>                                                  // CSClassFormatter.cs:1079
                public void AddRange(IEnumerable<CodeableConcept> values) => this.ptr.Interpretation.AddRange(values);// CSClassFormatter.cs:1080
            }                                                                   // CSClassFormatter.cs:1236
                                                                                // CSClassFormatter.cs:1216
            /// <summary>                                                       // CSClassFormatter.cs:1217
            /// Accessor for property ReferenceRange                            // CSClassFormatter.cs:1218
            /// </summary>                                                      // CSClassFormatter.cs:1219
            public class Accessor__ReferenceRange                               // CSClassFormatter.cs:1220
            {                                                                   // CSClassFormatter.cs:1221
                Observation.ComponentComponent ptr;                             // CSClassFormatter.cs:1222
                                                                                // CSClassFormatter.cs:1223
                public Accessor__ReferenceRange(Observation.ComponentComponent ptr)// CSClassFormatter.cs:1224
                {                                                               // CSClassFormatter.cs:1225
                    this.ptr = ptr;                                             // CSClassFormatter.cs:1226
                }                                                               // CSClassFormatter.cs:1227
            }                                                                   // CSClassFormatter.cs:1236
#endregion
#region Field Definitions
#endregion
#region Property Definitions
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.id.                // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__ElementId Id => new Accessor__ElementId(this.ptr); // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.extension.         // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Extension Extension => new Accessor__Extension(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.modifierExtension. // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__ModifierExtension ModifierExtension => new Accessor__ModifierExtension(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.code.              // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Code Code => new Accessor__Code(this.ptr);         // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.value[x].          // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Value Value => new Accessor__Value(this.ptr);      // CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.dataAbsentReason.  // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__DataAbsentReason DataAbsentReason => new Accessor__DataAbsentReason(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.interpretation.    // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__Interpretation Interpretation => new Accessor__Interpretation(this.ptr);// CSClassFormatter.cs:701
                                                                                // CSClassFormatter.cs:696
            /// <summary>                                                       // CSClassFormatter.cs:697
            /// Property for accessing Observation.component.referenceRange.    // CSClassFormatter.cs:698
            /// An accessor instance is created each time this property is called.// CSClassFormatter.cs:699
            /// </summary>                                                      // CSClassFormatter.cs:700
            public Accessor__ReferenceRange ReferenceRange => new Accessor__ReferenceRange(this.ptr);// CSClassFormatter.cs:701
#endregion
                                                                                // CSClassFormatter.cs:105
            /// <summary>                                                       // CSClassFormatter.cs:106
            /// Constructor                                                     // CSClassFormatter.cs:107
            /// </summary>                                                      // CSClassFormatter.cs:108
            public Accessor__ComponentComponent(Observation.ComponentComponent ptr) : base(ptr)// CSClassFormatter.cs:109
            {                                                                   // CSClassFormatter.cs:110
            }                                                                   // CSClassFormatter.cs:121
        }                                                                       // CSClassFormatter.cs:125
    }                                                                           // CSClassFormatter.cs:125
}                                                                               // CSCodeFormatter.cs:94
