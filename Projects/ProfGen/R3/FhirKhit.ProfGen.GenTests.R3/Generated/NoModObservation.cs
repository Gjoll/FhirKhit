/*                                                                              // CSCodeFormatter.cs:71
 * Code in this class was auto generated by ProfGen                             // CSCodeFormatter.cs:72
*/                                                                              // CSCodeFormatter.cs:73
using System;                                                                   // CSCodeFormatter.cs:74
using System.Linq;                                                              // CSCodeFormatter.cs:75
using System.Collections.Generic;                                               // CSCodeFormatter.cs:76
using System.Reflection;                                                        // CSCodeFormatter.cs:77
using System.Text;                                                              // CSCodeFormatter.cs:78
using FhirKhit.ProfGen.PGSharedLib;                                               // CSCodeFormatter.cs:79
using Hl7.Fhir.Model;                                                           // CSCodeFormatter.cs:80
                                                                                // CSCodeFormatter.cs:81
namespace FhirKhit.Test.R3                                                      // CSCodeFormatter.cs:82
{                                                                               // CSCodeFormatter.cs:83
                                                                                // CSClassFormatter.cs:76
    /// <summary>                                                               // CSClassFormatter.cs:77
    /// Class to implement FHIR profile 'NoModObservation'                      // CSClassFormatter.cs:78
    /// </summary>                                                              // CSClassFormatter.cs:79
    public class NoModObservation :                                             // CSClassFormatter.cs:80
        ProfileBase<Hl7.Fhir.Model.Observation>                                 // CSClassFormatter.cs:81
    {                                                                           // CSClassFormatter.cs:82
#region Sub Class Definitions
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property IdElement                                     // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__IdElement                                        // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__IdElement(Hl7.Fhir.Model.Observation ptr)          // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Id' value                                                  // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Id'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Id value)                                       // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.IdElement as Id;                               // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Id' Value                                                  // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Id value) => this.ptr.IdElement = value;            // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Meta                                          // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Meta                                             // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Meta(Hl7.Fhir.Model.Observation ptr)               // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Meta' value                                                // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Meta'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Meta value)                                     // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Meta as Meta;                                  // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Meta' Value                                                // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Meta value) => this.ptr.Meta = value;               // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property ImplicitRulesElement                          // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__ImplicitRulesElement                             // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__ImplicitRulesElement(Hl7.Fhir.Model.Observation ptr)// CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'FhirUri' value                                             // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'FhirUri'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out FhirUri value)                                  // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.ImplicitRulesElement as FhirUri;               // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'FhirUri' Value                                             // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(FhirUri value) => this.ptr.ImplicitRulesElement = value;// CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property LanguageElement                               // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__LanguageElement                                  // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__LanguageElement(Hl7.Fhir.Model.Observation ptr)    // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Code' value                                                // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Code'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Code value)                                     // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.LanguageElement as Code;                       // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Code' Value                                                // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Code value) => this.ptr.LanguageElement = value;    // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Text                                          // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Text                                             // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Text(Hl7.Fhir.Model.Observation ptr)               // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Narrative' value                                           // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Narrative'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Narrative value)                                // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Text as Narrative;                             // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Narrative' Value                                           // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Narrative value) => this.ptr.Text = value;          // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property Contained                                     // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__Contained                                        // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__Contained(Hl7.Fhir.Model.Observation ptr)          // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Contained.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<Resource> Get() => this.ptr.Contained;           // CSClassFormatter.cs:1090
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property ModifierExtension                             // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__ModifierExtension                                // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__ModifierExtension(Hl7.Fhir.Model.Observation ptr)  // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.ModifierExtension.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<Extension> Get() => this.ptr.ModifierExtension;  // CSClassFormatter.cs:1090
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property Identifier                                    // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__Identifier                                       // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__Identifier(Hl7.Fhir.Model.Observation ptr)         // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Identifier.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<Identifier> Get() => this.ptr.Identifier;        // CSClassFormatter.cs:1090
                                                                                // CSClassFormatter.cs:1031
            /// <summary>                                                       // CSClassFormatter.cs:1032
            /// Count of items                                                  // CSClassFormatter.cs:1033
            /// </summary>                                                      // CSClassFormatter.cs:1034
            public Int32 Count => this.ptr.Identifier.Count;                    // CSClassFormatter.cs:1035
                                                                                // CSClassFormatter.cs:1037
            /// <summary>                                                       // CSClassFormatter.cs:1038
            /// Get 'Identifier' value                                          // CSClassFormatter.cs:1039
            /// return true if successfull, false if value is null or con not be converted to 'Identifier'// CSClassFormatter.cs:1040
            /// </summary>                                                      // CSClassFormatter.cs:1041
            public bool Get(Int32 index, out Identifier value)                  // CSClassFormatter.cs:1042
            {                                                                   // CSClassFormatter.cs:1043
                value = this.ptr.Identifier[index] as Identifier;               // CSClassFormatter.cs:1044
                return value != null;                                           // CSClassFormatter.cs:1045
            }                                                                   // CSClassFormatter.cs:1046
                                                                                // CSClassFormatter.cs:1048
            /// <summary>                                                       // CSClassFormatter.cs:1049
            /// Set 'Identifier' Value                                          // CSClassFormatter.cs:1050
            /// </summary>                                                      // CSClassFormatter.cs:1051
            public void Set(Int32 index, Identifier value) => this.ptr.Identifier[index] = value;// CSClassFormatter.cs:1052
                                                                                // CSClassFormatter.cs:1054
            /// <summary>                                                       // CSClassFormatter.cs:1055
            /// Add 'Identifier' Value                                          // CSClassFormatter.cs:1056
            /// </summary>                                                      // CSClassFormatter.cs:1057
            public void Add(Identifier value) => this.ptr.Identifier.Add(value);// CSClassFormatter.cs:1058
                                                                                // CSClassFormatter.cs:1060
            /// <summary>                                                       // CSClassFormatter.cs:1061
            /// AddRange 'Identifier' Value                                     // CSClassFormatter.cs:1062
            /// </summary>                                                      // CSClassFormatter.cs:1063
            public void AddRange(IEnumerable<Identifier> values) => this.ptr.Identifier.AddRange(values);// CSClassFormatter.cs:1064
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property BasedOn                                       // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__BasedOn                                          // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__BasedOn(Hl7.Fhir.Model.Observation ptr)            // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                               // CSClassFormatter.cs:1081
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property StatusElement                                 // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__StatusElement                                    // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__StatusElement(Hl7.Fhir.Model.Observation ptr)      // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property Category                                      // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__Category                                         // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__Category(Hl7.Fhir.Model.Observation ptr)           // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Category.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<CodeableConcept> Get() => this.ptr.Category;     // CSClassFormatter.cs:1090
                                                                                // CSClassFormatter.cs:1031
            /// <summary>                                                       // CSClassFormatter.cs:1032
            /// Count of items                                                  // CSClassFormatter.cs:1033
            /// </summary>                                                      // CSClassFormatter.cs:1034
            public Int32 Count => this.ptr.Category.Count;                      // CSClassFormatter.cs:1035
                                                                                // CSClassFormatter.cs:1037
            /// <summary>                                                       // CSClassFormatter.cs:1038
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:1039
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:1040
            /// </summary>                                                      // CSClassFormatter.cs:1041
            public bool Get(Int32 index, out CodeableConcept value)             // CSClassFormatter.cs:1042
            {                                                                   // CSClassFormatter.cs:1043
                value = this.ptr.Category[index] as CodeableConcept;            // CSClassFormatter.cs:1044
                return value != null;                                           // CSClassFormatter.cs:1045
            }                                                                   // CSClassFormatter.cs:1046
                                                                                // CSClassFormatter.cs:1048
            /// <summary>                                                       // CSClassFormatter.cs:1049
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:1050
            /// </summary>                                                      // CSClassFormatter.cs:1051
            public void Set(Int32 index, CodeableConcept value) => this.ptr.Category[index] = value;// CSClassFormatter.cs:1052
                                                                                // CSClassFormatter.cs:1054
            /// <summary>                                                       // CSClassFormatter.cs:1055
            /// Add 'CodeableConcept' Value                                     // CSClassFormatter.cs:1056
            /// </summary>                                                      // CSClassFormatter.cs:1057
            public void Add(CodeableConcept value) => this.ptr.Category.Add(value);// CSClassFormatter.cs:1058
                                                                                // CSClassFormatter.cs:1060
            /// <summary>                                                       // CSClassFormatter.cs:1061
            /// AddRange 'CodeableConcept' Value                                // CSClassFormatter.cs:1062
            /// </summary>                                                      // CSClassFormatter.cs:1063
            public void AddRange(IEnumerable<CodeableConcept> values) => this.ptr.Category.AddRange(values);// CSClassFormatter.cs:1064
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Code                                          // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Code                                             // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Code(Hl7.Fhir.Model.Observation ptr)               // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Code as CodeableConcept;                       // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(CodeableConcept value) => this.ptr.Code = value;    // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Subject                                       // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Subject                                          // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Subject(Hl7.Fhir.Model.Observation ptr)            // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Context                                       // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Context                                          // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Context(Hl7.Fhir.Model.Observation ptr)            // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Effective                                     // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Effective                                        // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Effective(Hl7.Fhir.Model.Observation ptr)          // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'FhirDateTime' value                                        // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'FhirDateTime'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out FhirDateTime value)                             // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Effective as FhirDateTime;                     // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'FhirDateTime' Value                                        // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(FhirDateTime value) => this.ptr.Effective = value;  // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Period' value                                              // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Period'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Period value)                                   // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Effective as Period;                           // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Period' Value                                              // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Period value) => this.ptr.Effective = value;        // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property IssuedElement                                 // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__IssuedElement                                    // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__IssuedElement(Hl7.Fhir.Model.Observation ptr)      // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Instant' value                                             // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Instant'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Instant value)                                  // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.IssuedElement as Instant;                      // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Instant' Value                                             // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Instant value) => this.ptr.IssuedElement = value;   // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property Performer                                     // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__Performer                                        // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__Performer(Hl7.Fhir.Model.Observation ptr)          // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Performer.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<ResourceReference> Get() => this.ptr.Performer;  // CSClassFormatter.cs:1090
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Performer.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<ResourceReference> Get() => this.ptr.Performer;  // CSClassFormatter.cs:1090
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Performer.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<ResourceReference> Get() => this.ptr.Performer;  // CSClassFormatter.cs:1090
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Performer.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<ResourceReference> Get() => this.ptr.Performer;  // CSClassFormatter.cs:1090
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Value                                         // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Value                                            // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Value(Hl7.Fhir.Model.Observation ptr)              // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Quantity' value                                            // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Quantity'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Quantity value)                                 // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as Quantity;                             // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Quantity' Value                                            // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Quantity value) => this.ptr.Value = value;          // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as CodeableConcept;                      // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(CodeableConcept value) => this.ptr.Value = value;   // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'FhirString' value                                          // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'FhirString'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out FhirString value)                               // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as FhirString;                           // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'FhirString' Value                                          // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(FhirString value) => this.ptr.Value = value;        // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'FhirBoolean' value                                         // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'FhirBoolean'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out FhirBoolean value)                              // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as FhirBoolean;                          // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'FhirBoolean' Value                                         // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(FhirBoolean value) => this.ptr.Value = value;       // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Range' value                                               // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Range'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Range value)                                    // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as Range;                                // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Range' Value                                               // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Range value) => this.ptr.Value = value;             // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Ratio' value                                               // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Ratio'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Ratio value)                                    // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as Ratio;                                // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Ratio' Value                                               // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Ratio value) => this.ptr.Value = value;             // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'SampledData' value                                         // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'SampledData'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out SampledData value)                              // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as SampledData;                          // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'SampledData' Value                                         // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(SampledData value) => this.ptr.Value = value;       // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Attachment' value                                          // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Attachment'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Attachment value)                               // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as Attachment;                           // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Attachment' Value                                          // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Attachment value) => this.ptr.Value = value;        // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Time' value                                                // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Time'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Time value)                                     // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as Time;                                 // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Time' Value                                                // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Time value) => this.ptr.Value = value;              // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'FhirDateTime' value                                        // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'FhirDateTime'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out FhirDateTime value)                             // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as FhirDateTime;                         // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'FhirDateTime' Value                                        // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(FhirDateTime value) => this.ptr.Value = value;      // CSClassFormatter.cs:864
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'Period' value                                              // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'Period'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out Period value)                                   // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Value as Period;                               // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'Period' Value                                              // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(Period value) => this.ptr.Value = value;            // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property DataAbsentReason                              // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__DataAbsentReason                                 // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__DataAbsentReason(Hl7.Fhir.Model.Observation ptr)   // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.DataAbsentReason as CodeableConcept;           // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(CodeableConcept value) => this.ptr.DataAbsentReason = value;// CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Interpretation                                // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Interpretation                                   // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Interpretation(Hl7.Fhir.Model.Observation ptr)     // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Interpretation as CodeableConcept;             // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(CodeableConcept value) => this.ptr.Interpretation = value;// CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property CommentElement                                // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__CommentElement                                   // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__CommentElement(Hl7.Fhir.Model.Observation ptr)     // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'FhirString' value                                          // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'FhirString'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out FhirString value)                               // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.CommentElement as FhirString;                  // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'FhirString' Value                                          // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(FhirString value) => this.ptr.CommentElement = value;// CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property BodySite                                      // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__BodySite                                         // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__BodySite(Hl7.Fhir.Model.Observation ptr)           // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.BodySite as CodeableConcept;                   // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(CodeableConcept value) => this.ptr.BodySite = value;// CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Method                                        // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Method                                           // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Method(Hl7.Fhir.Model.Observation ptr)             // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
                                                                                // CSClassFormatter.cs:850
            /// <summary>                                                       // CSClassFormatter.cs:851
            /// Get 'CodeableConcept' value                                     // CSClassFormatter.cs:852
            /// return true if successfull, false if value is null or con not be converted to 'CodeableConcept'// CSClassFormatter.cs:853
            /// </summary>                                                      // CSClassFormatter.cs:854
            public bool Get(out CodeableConcept value)                          // CSClassFormatter.cs:855
            {                                                                   // CSClassFormatter.cs:856
                value = this.ptr.Method as CodeableConcept;                     // CSClassFormatter.cs:857
                return value != null;                                           // CSClassFormatter.cs:858
            }                                                                   // CSClassFormatter.cs:859
                                                                                // CSClassFormatter.cs:860
            /// <summary>                                                       // CSClassFormatter.cs:861
            /// Set 'CodeableConcept' Value                                     // CSClassFormatter.cs:862
            /// </summary>                                                      // CSClassFormatter.cs:863
            public void Set(CodeableConcept value) => this.ptr.Method = value;  // CSClassFormatter.cs:864
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Specimen                                      // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Specimen                                         // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Specimen(Hl7.Fhir.Model.Observation ptr)           // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:991
        /// <summary>                                                           // CSClassFormatter.cs:992
        /// Accessor for property Device                                        // CSClassFormatter.cs:993
        /// </summary>                                                          // CSClassFormatter.cs:994
        public class Accessor__Device                                           // CSClassFormatter.cs:995
        {                                                                       // CSClassFormatter.cs:996
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:997
                                                                                // CSClassFormatter.cs:998
            public Accessor__Device(Hl7.Fhir.Model.Observation ptr)             // CSClassFormatter.cs:999
            {                                                                   // CSClassFormatter.cs:1000
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1001
            }                                                                   // CSClassFormatter.cs:1002
        }                                                                       // CSClassFormatter.cs:1011
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property ReferenceRange                                // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__ReferenceRange                                   // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__ReferenceRange(Hl7.Fhir.Model.Observation ptr)     // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.ReferenceRange.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<Observation.ReferenceRangeComponent> Get() => this.ptr.ReferenceRange;// CSClassFormatter.cs:1090
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property Related                                       // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__Related                                          // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__Related(Hl7.Fhir.Model.Observation ptr)            // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Related.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<Observation.RelatedComponent> Get() => this.ptr.Related;// CSClassFormatter.cs:1090
        }                                                                       // CSClassFormatter.cs:1227
                                                                                // CSClassFormatter.cs:1207
        /// <summary>                                                           // CSClassFormatter.cs:1208
        /// Accessor for property Component                                     // CSClassFormatter.cs:1209
        /// </summary>                                                          // CSClassFormatter.cs:1210
        public class Accessor__Component                                        // CSClassFormatter.cs:1211
        {                                                                       // CSClassFormatter.cs:1212
            Hl7.Fhir.Model.Observation ptr;                                     // CSClassFormatter.cs:1213
                                                                                // CSClassFormatter.cs:1214
            public Accessor__Component(Hl7.Fhir.Model.Observation ptr)          // CSClassFormatter.cs:1215
            {                                                                   // CSClassFormatter.cs:1216
                this.ptr = ptr;                                                 // CSClassFormatter.cs:1217
            }                                                                   // CSClassFormatter.cs:1218
                                                                                // CSClassFormatter.cs:1081
            /// <summary>                                                       // CSClassFormatter.cs:1082
            /// Remove item at indicated index                                  // CSClassFormatter.cs:1083
            /// </summary>                                                      // CSClassFormatter.cs:1084
            public void RemoveAt(Int32 index) => this.ptr.Component.RemoveAt(index);// CSClassFormatter.cs:1085
                                                                                // CSClassFormatter.cs:1086
            /// <summary>                                                       // CSClassFormatter.cs:1087
            /// Get list of all items                                           // CSClassFormatter.cs:1088
            /// </summary>                                                      // CSClassFormatter.cs:1089
            public IEnumerable<Observation.ComponentComponent> Get() => this.ptr.Component;// CSClassFormatter.cs:1090
        }                                                                       // CSClassFormatter.cs:1227
#endregion
#region Property Definitions
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.id.                              // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__IdElement Id                                           // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Id == null)                                          // CSClassFormatter.cs:812
                    this.__Id = new Accessor__IdElement(this.ptr);              // CSClassFormatter.cs:813
                return this.__Id;                                               // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Id.                                      // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__IdElement __Id;                                               // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.meta.                            // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Meta Meta                                              // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Meta == null)                                        // CSClassFormatter.cs:812
                    this.__Meta = new Accessor__Meta(this.ptr);                 // CSClassFormatter.cs:813
                return this.__Meta;                                             // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Meta.                                    // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Meta __Meta;                                                  // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.implicitRules.                   // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__ImplicitRulesElement ImplicitRules                     // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__ImplicitRules == null)                               // CSClassFormatter.cs:812
                    this.__ImplicitRules = new Accessor__ImplicitRulesElement(this.ptr);// CSClassFormatter.cs:813
                return this.__ImplicitRules;                                    // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property ImplicitRules.                           // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__ImplicitRulesElement __ImplicitRules;                         // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.language.                        // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__LanguageElement Language                               // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Language == null)                                    // CSClassFormatter.cs:812
                    this.__Language = new Accessor__LanguageElement(this.ptr);  // CSClassFormatter.cs:813
                return this.__Language;                                         // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Language.                                // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__LanguageElement __Language;                                   // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.text.                            // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Text Text                                              // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Text == null)                                        // CSClassFormatter.cs:812
                    this.__Text = new Accessor__Text(this.ptr);                 // CSClassFormatter.cs:813
                return this.__Text;                                             // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Text.                                    // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Text __Text;                                                  // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.contained.                       // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Contained Contained                                    // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Contained == null)                                   // CSClassFormatter.cs:812
                    this.__Contained = new Accessor__Contained(this.ptr);       // CSClassFormatter.cs:813
                return this.__Contained;                                        // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Contained.                               // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Contained __Contained;                                        // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.modifierExtension.               // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__ModifierExtension ModifierExtension                    // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__ModifierExtension == null)                           // CSClassFormatter.cs:812
                    this.__ModifierExtension = new Accessor__ModifierExtension(this.ptr);// CSClassFormatter.cs:813
                return this.__ModifierExtension;                                // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property ModifierExtension.                       // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__ModifierExtension __ModifierExtension;                        // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.identifier.                      // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Identifier Identifier                                  // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Identifier == null)                                  // CSClassFormatter.cs:812
                    this.__Identifier = new Accessor__Identifier(this.ptr);     // CSClassFormatter.cs:813
                return this.__Identifier;                                       // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Identifier.                              // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Identifier __Identifier;                                      // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.basedOn.                         // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__BasedOn BasedOn                                        // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__BasedOn == null)                                     // CSClassFormatter.cs:812
                    this.__BasedOn = new Accessor__BasedOn(this.ptr);           // CSClassFormatter.cs:813
                return this.__BasedOn;                                          // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property BasedOn.                                 // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__BasedOn __BasedOn;                                            // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.status.                          // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__StatusElement Status                                   // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Status == null)                                      // CSClassFormatter.cs:812
                    this.__Status = new Accessor__StatusElement(this.ptr);      // CSClassFormatter.cs:813
                return this.__Status;                                           // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Status.                                  // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__StatusElement __Status;                                       // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.category.                        // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Category Category                                      // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Category == null)                                    // CSClassFormatter.cs:812
                    this.__Category = new Accessor__Category(this.ptr);         // CSClassFormatter.cs:813
                return this.__Category;                                         // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Category.                                // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Category __Category;                                          // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.code.                            // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Code Code                                              // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Code == null)                                        // CSClassFormatter.cs:812
                    this.__Code = new Accessor__Code(this.ptr);                 // CSClassFormatter.cs:813
                return this.__Code;                                             // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Code.                                    // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Code __Code;                                                  // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.subject.                         // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Subject Subject                                        // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Subject == null)                                     // CSClassFormatter.cs:812
                    this.__Subject = new Accessor__Subject(this.ptr);           // CSClassFormatter.cs:813
                return this.__Subject;                                          // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Subject.                                 // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Subject __Subject;                                            // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.context.                         // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Context Context                                        // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Context == null)                                     // CSClassFormatter.cs:812
                    this.__Context = new Accessor__Context(this.ptr);           // CSClassFormatter.cs:813
                return this.__Context;                                          // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Context.                                 // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Context __Context;                                            // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.effective[x].                    // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Effective Effective                                    // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Effective == null)                                   // CSClassFormatter.cs:812
                    this.__Effective = new Accessor__Effective(this.ptr);       // CSClassFormatter.cs:813
                return this.__Effective;                                        // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Effective.                               // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Effective __Effective;                                        // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.issued.                          // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__IssuedElement Issued                                   // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Issued == null)                                      // CSClassFormatter.cs:812
                    this.__Issued = new Accessor__IssuedElement(this.ptr);      // CSClassFormatter.cs:813
                return this.__Issued;                                           // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Issued.                                  // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__IssuedElement __Issued;                                       // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.performer.                       // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Performer Performer                                    // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Performer == null)                                   // CSClassFormatter.cs:812
                    this.__Performer = new Accessor__Performer(this.ptr);       // CSClassFormatter.cs:813
                return this.__Performer;                                        // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Performer.                               // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Performer __Performer;                                        // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.value[x].                        // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Value Value                                            // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Value == null)                                       // CSClassFormatter.cs:812
                    this.__Value = new Accessor__Value(this.ptr);               // CSClassFormatter.cs:813
                return this.__Value;                                            // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Value.                                   // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Value __Value;                                                // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.dataAbsentReason.                // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__DataAbsentReason DataAbsentReason                      // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__DataAbsentReason == null)                            // CSClassFormatter.cs:812
                    this.__DataAbsentReason = new Accessor__DataAbsentReason(this.ptr);// CSClassFormatter.cs:813
                return this.__DataAbsentReason;                                 // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property DataAbsentReason.                        // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__DataAbsentReason __DataAbsentReason;                          // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.interpretation.                  // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Interpretation Interpretation                          // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Interpretation == null)                              // CSClassFormatter.cs:812
                    this.__Interpretation = new Accessor__Interpretation(this.ptr);// CSClassFormatter.cs:813
                return this.__Interpretation;                                   // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Interpretation.                          // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Interpretation __Interpretation;                              // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.comment.                         // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__CommentElement Comment                                 // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Comment == null)                                     // CSClassFormatter.cs:812
                    this.__Comment = new Accessor__CommentElement(this.ptr);    // CSClassFormatter.cs:813
                return this.__Comment;                                          // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Comment.                                 // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__CommentElement __Comment;                                     // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.bodySite.                        // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__BodySite BodySite                                      // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__BodySite == null)                                    // CSClassFormatter.cs:812
                    this.__BodySite = new Accessor__BodySite(this.ptr);         // CSClassFormatter.cs:813
                return this.__BodySite;                                         // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property BodySite.                                // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__BodySite __BodySite;                                          // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.method.                          // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Method Method                                          // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Method == null)                                      // CSClassFormatter.cs:812
                    this.__Method = new Accessor__Method(this.ptr);             // CSClassFormatter.cs:813
                return this.__Method;                                           // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Method.                                  // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Method __Method;                                              // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.specimen.                        // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Specimen Specimen                                      // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Specimen == null)                                    // CSClassFormatter.cs:812
                    this.__Specimen = new Accessor__Specimen(this.ptr);         // CSClassFormatter.cs:813
                return this.__Specimen;                                         // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Specimen.                                // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Specimen __Specimen;                                          // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.device.                          // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Device Device                                          // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Device == null)                                      // CSClassFormatter.cs:812
                    this.__Device = new Accessor__Device(this.ptr);             // CSClassFormatter.cs:813
                return this.__Device;                                           // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Device.                                  // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Device __Device;                                              // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.referenceRange.                  // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__ReferenceRange ReferenceRange                          // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__ReferenceRange == null)                              // CSClassFormatter.cs:812
                    this.__ReferenceRange = new Accessor__ReferenceRange(this.ptr);// CSClassFormatter.cs:813
                return this.__ReferenceRange;                                   // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property ReferenceRange.                          // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__ReferenceRange __ReferenceRange;                              // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.related.                         // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Related Related                                        // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Related == null)                                     // CSClassFormatter.cs:812
                    this.__Related = new Accessor__Related(this.ptr);           // CSClassFormatter.cs:813
                return this.__Related;                                          // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Related.                                 // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Related __Related;                                            // CSClassFormatter.cs:821
                                                                                // CSClassFormatter.cs:803
        /// <summary>                                                           // CSClassFormatter.cs:804
        /// Property for accessing Observation.component.                       // CSClassFormatter.cs:805
        /// Lazy constructed.                                                   // CSClassFormatter.cs:806
        /// </summary>                                                          // CSClassFormatter.cs:807
        public Accessor__Component Component                                    // CSClassFormatter.cs:808
        {                                                                       // CSClassFormatter.cs:809
            get                                                                 // CSClassFormatter.cs:810
            {                                                                   // CSClassFormatter.cs:811
                if (this.__Component == null)                                   // CSClassFormatter.cs:812
                    this.__Component = new Accessor__Component(this.ptr);       // CSClassFormatter.cs:813
                return this.__Component;                                        // CSClassFormatter.cs:814
            }                                                                   // CSClassFormatter.cs:815
        }                                                                       // CSClassFormatter.cs:816
                                                                                // CSClassFormatter.cs:817
        /// <summary>                                                           // CSClassFormatter.cs:818
        /// Backing field for property Component.                               // CSClassFormatter.cs:819
        /// </summary>                                                          // CSClassFormatter.cs:820
        Accessor__Component __Component;                                        // CSClassFormatter.cs:821
#endregion
                                                                                // CSClassFormatter.cs:94
        /// <summary>                                                           // CSClassFormatter.cs:95
        /// Constructor                                                         // CSClassFormatter.cs:96
        /// </summary>                                                          // CSClassFormatter.cs:97
        public NoModObservation(Hl7.Fhir.Model.Observation ptr) : base(ptr)     // CSClassFormatter.cs:98
        {                                                                       // CSClassFormatter.cs:99
        }                                                                       // CSClassFormatter.cs:109
    }                                                                           // CSClassFormatter.cs:113
}                                                                               // CSCodeFormatter.cs:93
