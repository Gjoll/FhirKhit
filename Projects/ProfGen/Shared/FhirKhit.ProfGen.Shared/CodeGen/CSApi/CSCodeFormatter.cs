using FhirKhit.ProfGen.Shared;
using FhirKhit.Tools;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Model;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

namespace FhirKhit.ProfGen.CSApi
{
    public class CSCodeFormatter : ICodeFormatter
    {
        CodeEditor code;
        CodeBlockNested nameSpaceBlock;
        ProfileGenerator gen;

        List<CSClassFormatter> classes = new List<CSClassFormatter>();
        Dictionary<Type, String> backBoneElements = new Dictionary<Type, string>();

        /// <summary>
        /// Type of the fhir resource class that the profile is derived from (the resource it profiles)
        /// </summary>
        Type fhirType;

        /// <summary>
        /// Dictionary of Fhir element properties in the current resouce class.
        /// </summary>
        Dictionary<String, PropertyInfo> elements = new Dictionary<string, PropertyInfo>();

        CSClassFormatter TopClass
        {
            get
            {
                if (classes.Count == 0)
                    return null;
                return this.classes[this.classes.Count - 1];
            }
        }

        public CSCodeFormatter(ProfileGenerator gen)
        {
            this.gen = gen;
            this.code = new CodeEditor();
        }


        /// <summary>
        /// Populate FhirApiTypes with all the Fhir Api class (resource) types that have the FhirTypeAttribute attribute.
        /// </summary>
        /// <param name="resourceType"></param>
        void PopulateElementDictionary(Type resourceType)
        {
            this.fhirType = resourceType;

            Assembly coreAsm = Assembly.GetAssembly(typeof(Hl7.Fhir.Model.Base));
            foreach (PropertyInfo property in resourceType.GetProperties())
            {
                FhirElementAttribute att = property.GetCustomAttribute<FhirElementAttribute>(false);
                if (att != null)
                    this.elements.Add(att.Name, property);
            }
        }

        /// <summary>
        /// Start namespace.
        /// </summary>
        public void StartNameSpace(String nameSpace)
        {
            this.nameSpaceBlock = this.code.Blocks.AppendBlock();
            this.nameSpaceBlock
                .AppendCode($"/*")
                .AppendCode($" * Code in this class was auto generated by ProfGen")
                .AppendCode($"*/")
                .AppendCode($"using System;")
                .AppendCode($"using System.Linq;")
                .AppendCode($"using System.Collections.Generic;")
                .AppendCode($"using System.Reflection;")
                .AppendCode($"using System.Text;")
                .AppendCode($"using FhirKhit.ProfGen.SharedLib;")
                .AppendCode($"using Hl7.Fhir.Model;")
                .AppendCode($"")
                .AppendCode($"namespace {nameSpace}")
                .OpenBrace()
                ;
        }

        /// <summary>
        /// End namespace.
        /// </summary>
        public void EndNameSpace()
        {
            this.nameSpaceBlock
                .CloseBrace()
                ;
            this.nameSpaceBlock = null;
        }

        /// <summary>
        /// Start creating a class.
        /// </summary>
        public void StartClass(String className, Type fhirType)
        {
            CodeBlockNested containingBlock;
            CSClassFormatter cf = this.TopClass;

            if (cf == null)
                containingBlock = this.nameSpaceBlock;
            else
                containingBlock = this.classes[this.classes.Count - 1].ClassBlock;
            cf = new CSClassFormatter(this.gen, this, containingBlock);
            this.classes.Add(cf);
            cf.StartClass(className, fhirType);
        }

        /// <summary>
        /// End creating a class.
        /// </summary>
        public void EndClass()
        {
            this.TopClass.EndClass();
            this.classes.RemoveAt(this.classes.Count - 1);
        }

        /// <summary>
        /// Create the following property, It was not modified from the original declaration.
        /// </summary>
        /// <param name="sd"></param>
        /// <param name="unmodifiedElement"></param>
        public void CreateProperty(ElementTreeNode profileElement) =>
            this.TopClass.CreateProperty(profileElement);

        public String GetCode() => this.code.ToString();

        public bool TryGetBackboneElement(Type type, out String className)
        {
            return this.backBoneElements.TryGetValue(type, out className);
        }

        public void AddBackboneElement(Type type, String className)
        {
            this.backBoneElements.Add(type, className);
        }
    }
}
